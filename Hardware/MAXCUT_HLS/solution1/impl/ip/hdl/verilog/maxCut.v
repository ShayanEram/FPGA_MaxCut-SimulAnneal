// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="maxCut,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=14375249,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=38,HLS_SYN_FF=2667,HLS_SYN_LUT=3646,HLS_VERSION=2018_3}" *)

module maxCut (
        ap_clk,
        ap_rst_n,
        input_stream_TDATA,
        input_stream_TVALID,
        input_stream_TREADY,
        input_stream_TKEEP,
        input_stream_TSTRB,
        input_stream_TUSER,
        input_stream_TLAST,
        input_stream_TID,
        input_stream_TDEST,
        output_stream_TDATA,
        output_stream_TVALID,
        output_stream_TREADY,
        output_stream_TKEEP,
        output_stream_TSTRB,
        output_stream_TUSER,
        output_stream_TLAST,
        output_stream_TID,
        output_stream_TDEST,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 135'd1;
parameter    ap_ST_fsm_state2 = 135'd2;
parameter    ap_ST_fsm_state3 = 135'd4;
parameter    ap_ST_fsm_state4 = 135'd8;
parameter    ap_ST_fsm_state5 = 135'd16;
parameter    ap_ST_fsm_state6 = 135'd32;
parameter    ap_ST_fsm_state7 = 135'd64;
parameter    ap_ST_fsm_state8 = 135'd128;
parameter    ap_ST_fsm_state9 = 135'd256;
parameter    ap_ST_fsm_state10 = 135'd512;
parameter    ap_ST_fsm_state11 = 135'd1024;
parameter    ap_ST_fsm_state12 = 135'd2048;
parameter    ap_ST_fsm_state13 = 135'd4096;
parameter    ap_ST_fsm_state14 = 135'd8192;
parameter    ap_ST_fsm_state15 = 135'd16384;
parameter    ap_ST_fsm_state16 = 135'd32768;
parameter    ap_ST_fsm_state17 = 135'd65536;
parameter    ap_ST_fsm_state18 = 135'd131072;
parameter    ap_ST_fsm_state19 = 135'd262144;
parameter    ap_ST_fsm_state20 = 135'd524288;
parameter    ap_ST_fsm_state21 = 135'd1048576;
parameter    ap_ST_fsm_state22 = 135'd2097152;
parameter    ap_ST_fsm_state23 = 135'd4194304;
parameter    ap_ST_fsm_state24 = 135'd8388608;
parameter    ap_ST_fsm_state25 = 135'd16777216;
parameter    ap_ST_fsm_state26 = 135'd33554432;
parameter    ap_ST_fsm_state27 = 135'd67108864;
parameter    ap_ST_fsm_state28 = 135'd134217728;
parameter    ap_ST_fsm_state29 = 135'd268435456;
parameter    ap_ST_fsm_state30 = 135'd536870912;
parameter    ap_ST_fsm_state31 = 135'd1073741824;
parameter    ap_ST_fsm_state32 = 135'd2147483648;
parameter    ap_ST_fsm_state33 = 135'd4294967296;
parameter    ap_ST_fsm_state34 = 135'd8589934592;
parameter    ap_ST_fsm_state35 = 135'd17179869184;
parameter    ap_ST_fsm_state36 = 135'd34359738368;
parameter    ap_ST_fsm_state37 = 135'd68719476736;
parameter    ap_ST_fsm_state38 = 135'd137438953472;
parameter    ap_ST_fsm_state39 = 135'd274877906944;
parameter    ap_ST_fsm_state40 = 135'd549755813888;
parameter    ap_ST_fsm_state41 = 135'd1099511627776;
parameter    ap_ST_fsm_state42 = 135'd2199023255552;
parameter    ap_ST_fsm_state43 = 135'd4398046511104;
parameter    ap_ST_fsm_state44 = 135'd8796093022208;
parameter    ap_ST_fsm_state45 = 135'd17592186044416;
parameter    ap_ST_fsm_state46 = 135'd35184372088832;
parameter    ap_ST_fsm_state47 = 135'd70368744177664;
parameter    ap_ST_fsm_state48 = 135'd140737488355328;
parameter    ap_ST_fsm_state49 = 135'd281474976710656;
parameter    ap_ST_fsm_state50 = 135'd562949953421312;
parameter    ap_ST_fsm_state51 = 135'd1125899906842624;
parameter    ap_ST_fsm_state52 = 135'd2251799813685248;
parameter    ap_ST_fsm_state53 = 135'd4503599627370496;
parameter    ap_ST_fsm_state54 = 135'd9007199254740992;
parameter    ap_ST_fsm_state55 = 135'd18014398509481984;
parameter    ap_ST_fsm_state56 = 135'd36028797018963968;
parameter    ap_ST_fsm_state57 = 135'd72057594037927936;
parameter    ap_ST_fsm_state58 = 135'd144115188075855872;
parameter    ap_ST_fsm_state59 = 135'd288230376151711744;
parameter    ap_ST_fsm_state60 = 135'd576460752303423488;
parameter    ap_ST_fsm_state61 = 135'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 135'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 135'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 135'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 135'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 135'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 135'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 135'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 135'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 135'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 135'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 135'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 135'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 135'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 135'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 135'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 135'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 135'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 135'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 135'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 135'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 135'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 135'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 135'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 135'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 135'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 135'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 135'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 135'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 135'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 135'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 135'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 135'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 135'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 135'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 135'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 135'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 135'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 135'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 135'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 135'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 135'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 135'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 135'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 135'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 135'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 135'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 135'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 135'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 135'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 135'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 135'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 135'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 135'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 135'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 135'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 135'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 135'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 135'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 135'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 135'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 135'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 135'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 135'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 135'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 135'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 135'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 135'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 135'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 135'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 135'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 135'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 135'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 135'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 135'd21778071482940061661655974875633165533184;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [7:0] input_stream_TDATA;
input   input_stream_TVALID;
output   input_stream_TREADY;
input  [0:0] input_stream_TKEEP;
input  [0:0] input_stream_TSTRB;
input  [1:0] input_stream_TUSER;
input  [0:0] input_stream_TLAST;
input  [4:0] input_stream_TID;
input  [5:0] input_stream_TDEST;
output  [7:0] output_stream_TDATA;
output   output_stream_TVALID;
input   output_stream_TREADY;
output  [0:0] output_stream_TKEEP;
output  [0:0] output_stream_TSTRB;
output  [1:0] output_stream_TUSER;
output  [0:0] output_stream_TLAST;
output  [4:0] output_stream_TID;
output  [5:0] output_stream_TDEST;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [134:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg  signed [7:0] input_stream_V_data_V_0_data_out;
wire    input_stream_V_data_V_0_vld_in;
wire    input_stream_V_data_V_0_vld_out;
wire    input_stream_V_data_V_0_ack_in;
reg    input_stream_V_data_V_0_ack_out;
reg   [7:0] input_stream_V_data_V_0_payload_A;
reg   [7:0] input_stream_V_data_V_0_payload_B;
reg    input_stream_V_data_V_0_sel_rd;
reg    input_stream_V_data_V_0_sel_wr;
wire    input_stream_V_data_V_0_sel;
wire    input_stream_V_data_V_0_load_A;
wire    input_stream_V_data_V_0_load_B;
reg   [1:0] input_stream_V_data_V_0_state;
wire    input_stream_V_data_V_0_state_cmp_full;
reg   [0:0] input_stream_V_keep_V_0_data_out;
wire    input_stream_V_keep_V_0_vld_in;
wire    input_stream_V_keep_V_0_vld_out;
wire    input_stream_V_keep_V_0_ack_in;
reg    input_stream_V_keep_V_0_ack_out;
reg   [0:0] input_stream_V_keep_V_0_payload_A;
reg   [0:0] input_stream_V_keep_V_0_payload_B;
reg    input_stream_V_keep_V_0_sel_rd;
reg    input_stream_V_keep_V_0_sel_wr;
wire    input_stream_V_keep_V_0_sel;
wire    input_stream_V_keep_V_0_load_A;
wire    input_stream_V_keep_V_0_load_B;
reg   [1:0] input_stream_V_keep_V_0_state;
wire    input_stream_V_keep_V_0_state_cmp_full;
reg   [0:0] input_stream_V_strb_V_0_data_out;
wire    input_stream_V_strb_V_0_vld_in;
wire    input_stream_V_strb_V_0_vld_out;
wire    input_stream_V_strb_V_0_ack_in;
reg    input_stream_V_strb_V_0_ack_out;
reg   [0:0] input_stream_V_strb_V_0_payload_A;
reg   [0:0] input_stream_V_strb_V_0_payload_B;
reg    input_stream_V_strb_V_0_sel_rd;
reg    input_stream_V_strb_V_0_sel_wr;
wire    input_stream_V_strb_V_0_sel;
wire    input_stream_V_strb_V_0_load_A;
wire    input_stream_V_strb_V_0_load_B;
reg   [1:0] input_stream_V_strb_V_0_state;
wire    input_stream_V_strb_V_0_state_cmp_full;
reg   [1:0] input_stream_V_user_V_0_data_out;
wire    input_stream_V_user_V_0_vld_in;
wire    input_stream_V_user_V_0_vld_out;
wire    input_stream_V_user_V_0_ack_in;
reg    input_stream_V_user_V_0_ack_out;
reg   [1:0] input_stream_V_user_V_0_payload_A;
reg   [1:0] input_stream_V_user_V_0_payload_B;
reg    input_stream_V_user_V_0_sel_rd;
reg    input_stream_V_user_V_0_sel_wr;
wire    input_stream_V_user_V_0_sel;
wire    input_stream_V_user_V_0_load_A;
wire    input_stream_V_user_V_0_load_B;
reg   [1:0] input_stream_V_user_V_0_state;
wire    input_stream_V_user_V_0_state_cmp_full;
reg   [4:0] input_stream_V_id_V_0_data_out;
wire    input_stream_V_id_V_0_vld_in;
wire    input_stream_V_id_V_0_vld_out;
wire    input_stream_V_id_V_0_ack_in;
reg    input_stream_V_id_V_0_ack_out;
reg   [4:0] input_stream_V_id_V_0_payload_A;
reg   [4:0] input_stream_V_id_V_0_payload_B;
reg    input_stream_V_id_V_0_sel_rd;
reg    input_stream_V_id_V_0_sel_wr;
wire    input_stream_V_id_V_0_sel;
wire    input_stream_V_id_V_0_load_A;
wire    input_stream_V_id_V_0_load_B;
reg   [1:0] input_stream_V_id_V_0_state;
wire    input_stream_V_id_V_0_state_cmp_full;
reg   [5:0] input_stream_V_dest_V_0_data_out;
wire    input_stream_V_dest_V_0_vld_in;
wire    input_stream_V_dest_V_0_vld_out;
wire    input_stream_V_dest_V_0_ack_in;
reg    input_stream_V_dest_V_0_ack_out;
reg   [5:0] input_stream_V_dest_V_0_payload_A;
reg   [5:0] input_stream_V_dest_V_0_payload_B;
reg    input_stream_V_dest_V_0_sel_rd;
reg    input_stream_V_dest_V_0_sel_wr;
wire    input_stream_V_dest_V_0_sel;
wire    input_stream_V_dest_V_0_load_A;
wire    input_stream_V_dest_V_0_load_B;
reg   [1:0] input_stream_V_dest_V_0_state;
wire    input_stream_V_dest_V_0_state_cmp_full;
reg   [7:0] output_stream_V_data_V_1_data_out;
reg    output_stream_V_data_V_1_vld_in;
wire    output_stream_V_data_V_1_vld_out;
wire    output_stream_V_data_V_1_ack_in;
wire    output_stream_V_data_V_1_ack_out;
reg   [7:0] output_stream_V_data_V_1_payload_A;
reg   [7:0] output_stream_V_data_V_1_payload_B;
reg    output_stream_V_data_V_1_sel_rd;
reg    output_stream_V_data_V_1_sel_wr;
wire    output_stream_V_data_V_1_sel;
wire    output_stream_V_data_V_1_load_A;
wire    output_stream_V_data_V_1_load_B;
reg   [1:0] output_stream_V_data_V_1_state;
wire    output_stream_V_data_V_1_state_cmp_full;
reg   [0:0] output_stream_V_keep_V_1_data_out;
reg    output_stream_V_keep_V_1_vld_in;
wire    output_stream_V_keep_V_1_vld_out;
wire    output_stream_V_keep_V_1_ack_in;
wire    output_stream_V_keep_V_1_ack_out;
reg   [0:0] output_stream_V_keep_V_1_payload_A;
reg   [0:0] output_stream_V_keep_V_1_payload_B;
reg    output_stream_V_keep_V_1_sel_rd;
reg    output_stream_V_keep_V_1_sel_wr;
wire    output_stream_V_keep_V_1_sel;
wire    output_stream_V_keep_V_1_load_A;
wire    output_stream_V_keep_V_1_load_B;
reg   [1:0] output_stream_V_keep_V_1_state;
wire    output_stream_V_keep_V_1_state_cmp_full;
reg   [0:0] output_stream_V_strb_V_1_data_out;
reg    output_stream_V_strb_V_1_vld_in;
wire    output_stream_V_strb_V_1_vld_out;
wire    output_stream_V_strb_V_1_ack_in;
wire    output_stream_V_strb_V_1_ack_out;
reg   [0:0] output_stream_V_strb_V_1_payload_A;
reg   [0:0] output_stream_V_strb_V_1_payload_B;
reg    output_stream_V_strb_V_1_sel_rd;
reg    output_stream_V_strb_V_1_sel_wr;
wire    output_stream_V_strb_V_1_sel;
wire    output_stream_V_strb_V_1_load_A;
wire    output_stream_V_strb_V_1_load_B;
reg   [1:0] output_stream_V_strb_V_1_state;
wire    output_stream_V_strb_V_1_state_cmp_full;
reg   [1:0] output_stream_V_user_V_1_data_out;
reg    output_stream_V_user_V_1_vld_in;
wire    output_stream_V_user_V_1_vld_out;
wire    output_stream_V_user_V_1_ack_in;
wire    output_stream_V_user_V_1_ack_out;
reg   [1:0] output_stream_V_user_V_1_payload_A;
reg   [1:0] output_stream_V_user_V_1_payload_B;
reg    output_stream_V_user_V_1_sel_rd;
reg    output_stream_V_user_V_1_sel_wr;
wire    output_stream_V_user_V_1_sel;
wire    output_stream_V_user_V_1_load_A;
wire    output_stream_V_user_V_1_load_B;
reg   [1:0] output_stream_V_user_V_1_state;
wire    output_stream_V_user_V_1_state_cmp_full;
reg   [0:0] output_stream_V_last_V_1_data_out;
reg    output_stream_V_last_V_1_vld_in;
wire    output_stream_V_last_V_1_vld_out;
wire    output_stream_V_last_V_1_ack_in;
wire    output_stream_V_last_V_1_ack_out;
reg   [0:0] output_stream_V_last_V_1_payload_A;
reg   [0:0] output_stream_V_last_V_1_payload_B;
reg    output_stream_V_last_V_1_sel_rd;
reg    output_stream_V_last_V_1_sel_wr;
wire    output_stream_V_last_V_1_sel;
wire    output_stream_V_last_V_1_load_A;
wire    output_stream_V_last_V_1_load_B;
reg   [1:0] output_stream_V_last_V_1_state;
wire    output_stream_V_last_V_1_state_cmp_full;
reg   [4:0] output_stream_V_id_V_1_data_out;
reg    output_stream_V_id_V_1_vld_in;
wire    output_stream_V_id_V_1_vld_out;
wire    output_stream_V_id_V_1_ack_in;
wire    output_stream_V_id_V_1_ack_out;
reg   [4:0] output_stream_V_id_V_1_payload_A;
reg   [4:0] output_stream_V_id_V_1_payload_B;
reg    output_stream_V_id_V_1_sel_rd;
reg    output_stream_V_id_V_1_sel_wr;
wire    output_stream_V_id_V_1_sel;
wire    output_stream_V_id_V_1_load_A;
wire    output_stream_V_id_V_1_load_B;
reg   [1:0] output_stream_V_id_V_1_state;
wire    output_stream_V_id_V_1_state_cmp_full;
reg   [5:0] output_stream_V_dest_V_1_data_out;
reg    output_stream_V_dest_V_1_vld_in;
wire    output_stream_V_dest_V_1_vld_out;
wire    output_stream_V_dest_V_1_ack_in;
wire    output_stream_V_dest_V_1_ack_out;
reg   [5:0] output_stream_V_dest_V_1_payload_A;
reg   [5:0] output_stream_V_dest_V_1_payload_B;
reg    output_stream_V_dest_V_1_sel_rd;
reg    output_stream_V_dest_V_1_sel_wr;
wire    output_stream_V_dest_V_1_sel;
wire    output_stream_V_dest_V_1_load_A;
wire    output_stream_V_dest_V_1_load_B;
reg   [1:0] output_stream_V_dest_V_1_state;
wire    output_stream_V_dest_V_1_state_cmp_full;
reg   [31:0] lfsr_V;
reg    input_stream_TDATA_blk_n;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond2_fu_609_p2;
reg    output_stream_TDATA_blk_n;
wire    ap_CS_fsm_state134;
wire    ap_CS_fsm_state135;
wire   [31:0] currentSolution_q0;
reg  signed [31:0] reg_495;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state132;
wire   [2:0] indvarinc_fu_499_p2;
reg   [2:0] indvarinc_reg_1586;
wire    ap_CS_fsm_state2;
wire   [6:0] tmp_1_fu_529_p2;
reg   [6:0] tmp_1_reg_1591;
wire   [2:0] indvarinc1_fu_535_p2;
wire    ap_CS_fsm_state3;
wire   [2:0] i_V_fu_573_p2;
reg   [2:0] i_V_reg_1640;
wire    ap_CS_fsm_state4;
wire   [6:0] tmp_8_fu_603_p2;
reg   [6:0] tmp_8_reg_1645;
wire   [0:0] exitcond1_fu_567_p2;
wire   [2:0] j_V_fu_615_p2;
reg   [2:0] j_V_reg_1653;
reg    ap_block_state5;
wire  signed [18:0] tmp_10_fu_1580_p2;
reg  signed [18:0] tmp_10_reg_1658;
wire   [6:0] tmp_11_fu_653_p2;
reg   [6:0] tmp_11_reg_1663;
wire   [2:0] indvarinc2_fu_691_p2;
wire    ap_CS_fsm_state7;
wire   [2:0] i_V_1_fu_714_p2;
wire    ap_CS_fsm_state8;
wire   [0:0] tmp_17_fu_835_p2;
reg   [0:0] tmp_17_reg_1691;
wire    ap_CS_fsm_state9;
wire   [17:0] iterate_V_fu_841_p2;
reg   [17:0] iterate_V_reg_1695;
reg   [31:0] r_V_2_reg_1700;
wire   [0:0] tmp_43_fu_867_p3;
reg   [0:0] tmp_43_reg_1709;
wire   [15:0] tmp_47_fu_911_p2;
reg   [15:0] tmp_47_reg_1714;
wire   [63:0] tmp_18_fu_931_p1;
reg   [63:0] tmp_18_reg_1724;
wire    ap_CS_fsm_state41;
wire   [6:0] tmp_51_fu_959_p2;
reg   [6:0] tmp_51_reg_1729;
wire   [2:0] j_V_1_fu_971_p2;
reg   [2:0] j_V_1_reg_1737;
wire    ap_CS_fsm_state42;
wire   [0:0] exitcond8_fu_965_p2;
reg   [2:0] currentSolution_addr_2_reg_1752;
wire   [19:0] matrix_q0;
reg   [19:0] matrix_load_reg_1757;
wire  signed [31:0] tmp_23_fu_999_p2;
reg  signed [31:0] tmp_23_reg_1762;
wire    ap_CS_fsm_state44;
reg   [0:0] tmp_53_reg_1767;
wire   [64:0] mul_fu_1016_p2;
reg   [64:0] mul_reg_1773;
wire    ap_CS_fsm_state45;
reg   [22:0] tmp_55_reg_1778;
wire  signed [22:0] p_v1_v_fu_1047_p3;
reg  signed [22:0] p_v1_v_reg_1783;
wire    ap_CS_fsm_state46;
wire   [24:0] localFieldVal_1_fu_1072_p2;
wire    ap_CS_fsm_state47;
wire   [24:0] tmp_19_fu_1078_p2;
reg   [24:0] tmp_19_reg_1794;
wire   [31:0] tmp_20_fu_1087_p2;
reg   [31:0] tmp_20_reg_1799;
wire    ap_CS_fsm_state49;
wire   [0:0] tmp_21_fu_1093_p2;
reg   [0:0] tmp_21_reg_1807;
wire    ap_CS_fsm_state50;
wire   [31:0] grp_fu_1098_p2;
reg   [31:0] deltaEnergy_reg_1811;
wire    ap_CS_fsm_state85;
wire    ap_CS_fsm_state86;
wire  signed [31:0] grp_fu_1107_p2;
reg  signed [31:0] x_assign_reg_1826;
wire    ap_CS_fsm_state121;
wire  signed [31:0] tmp_i2_fu_1113_p2;
reg  signed [31:0] tmp_i2_reg_1833;
wire    ap_CS_fsm_state122;
reg   [0:0] tmp_63_reg_1838;
wire   [64:0] mul7_fu_1128_p2;
reg   [64:0] mul7_reg_1844;
wire    ap_CS_fsm_state123;
reg   [21:0] tmp_65_reg_1849;
wire   [21:0] tmp5_fu_1177_p2;
reg   [21:0] tmp5_reg_1855;
wire    ap_CS_fsm_state124;
wire   [31:0] tmp_44_i_fu_1186_p2;
wire    ap_CS_fsm_state125;
wire   [37:0] ret_V_fu_1298_p2;
reg   [37:0] ret_V_reg_1865;
wire   [75:0] mul1_fu_1307_p2;
reg   [75:0] mul1_reg_1870;
wire    ap_CS_fsm_state126;
wire  signed [31:0] tmp_35_fu_1357_p2;
reg  signed [31:0] tmp_35_reg_1881;
wire    ap_CS_fsm_state127;
wire   [0:0] tmp_73_fu_1349_p3;
reg   [0:0] tmp_74_reg_1886;
wire   [64:0] mul3_fu_1374_p2;
reg   [64:0] mul3_reg_1892;
wire    ap_CS_fsm_state128;
reg   [15:0] tmp_77_reg_1897;
wire   [27:0] phitmp_fu_1460_p2;
wire    ap_CS_fsm_state130;
wire   [0:0] tmp_37_fu_1437_p2;
wire   [0:0] or_cond_fu_1454_p2;
wire   [2:0] i_V_2_fu_1472_p2;
reg   [2:0] i_V_2_reg_1916;
wire    ap_CS_fsm_state131;
reg    ap_block_state131;
wire   [0:0] exitcond_fu_1466_p2;
wire   [0:0] output_last_V_fu_1483_p2;
reg   [0:0] output_last_V_reg_1926;
reg   [0:0] tmp_80_reg_1931;
wire   [64:0] mul4_fu_1501_p2;
reg   [64:0] mul4_reg_1937;
wire    ap_CS_fsm_state133;
reg   [22:0] tmp_82_reg_1942;
wire   [7:0] fpga_output_V_fu_1572_p3;
reg   [5:0] matrix_address0;
reg    matrix_ce0;
reg    matrix_we0;
reg   [19:0] matrix_d0;
reg   [2:0] currentSolution_address0;
reg    currentSolution_ce0;
reg    currentSolution_we0;
reg   [31:0] currentSolution_d0;
reg   [2:0] invdar_reg_343;
wire   [0:0] tmp_2_fu_555_p2;
wire   [0:0] tmp_3_fu_561_p2;
reg   [2:0] invdar1_reg_355;
reg   [2:0] t_V_reg_366;
reg   [2:0] t_V_1_reg_377;
wire    ap_CS_fsm_state6;
reg   [2:0] invdar2_reg_388;
wire   [0:0] tmp_4_fu_702_p2;
reg   [2:0] p_s_reg_399;
wire   [0:0] exitcond3_fu_708_p2;
reg   [17:0] p_4_reg_410;
reg   [27:0] phi_mul_reg_421;
reg   [2:0] p_6_reg_433;
reg   [24:0] localFieldVal_reg_444;
reg   [31:0] prob_reg_456;
reg   [2:0] t_V_2_reg_467;
wire  signed [63:0] tmp_27_cast_fu_550_p1;
wire  signed [63:0] tmp_64_cast_fu_683_p1;
wire   [63:0] tmp_s_fu_697_p1;
wire   [63:0] tmp_16_fu_825_p1;
wire  signed [63:0] tmp_68_cast_fu_991_p1;
wire   [63:0] tmp_22_fu_977_p1;
wire   [63:0] tmp_40_fu_1478_p1;
wire   [31:0] ret_V_1_cast_fu_806_p1;
wire   [31:0] ret_V_5_cast_fu_1284_p1;
reg   [0:0] tmp_keep_V_fu_208;
reg   [0:0] tmp_strb_V_fu_212;
reg   [1:0] tmp_user_V_fu_216;
reg   [4:0] tmp_id_V_fu_220;
reg   [5:0] tmp_dest_V_fu_224;
reg   [31:0] temperature_fu_228;
wire   [31:0] tmp_36_fu_1425_p3;
wire    ap_CS_fsm_state129;
wire  signed [19:0] tmp_12_cast_cast_fu_687_p1;
wire   [31:0] tmp_15_cast_cast_fu_816_p3;
wire   [0:0] tmp_29_fu_1326_p2;
wire   [31:0] tmp_30_fu_1332_p2;
wire   [5:0] tmp_fu_505_p3;
wire   [3:0] tmp_9_fu_517_p3;
wire   [6:0] p_shl_cast_fu_513_p1;
wire   [6:0] p_shl1_cast_fu_525_p1;
wire   [6:0] tmp_1_cast_fu_541_p1;
wire   [6:0] tmp_5_fu_545_p2;
wire   [5:0] tmp_6_fu_579_p3;
wire   [3:0] tmp_7_fu_591_p3;
wire   [6:0] p_shl2_cast_fu_587_p1;
wire   [6:0] p_shl3_cast_fu_599_p1;
wire   [6:0] tmp_12_cast_fu_649_p1;
wire   [0:0] tmp_14_fu_732_p3;
wire   [0:0] tmp_13_fu_728_p1;
wire   [0:0] tmp_24_fu_748_p3;
wire   [0:0] tmp_15_fu_740_p3;
wire   [0:0] tmp_27_fu_762_p2;
wire   [0:0] tmp_26_fu_756_p2;
wire   [0:0] ret_V2_i_fu_768_p2;
wire   [15:0] tmp_31_fu_782_p4;
wire   [15:0] r_V_1_fu_774_p3;
wire   [12:0] grp_fu_482_p4;
wire   [15:0] tmp_32_fu_792_p2;
wire   [28:0] ret_V_1_fu_798_p3;
wire   [0:0] tmp_12_fu_720_p3;
wire   [0:0] tmp_41_fu_851_p3;
wire   [0:0] tmp_34_fu_847_p1;
wire   [0:0] tmp_42_fu_859_p3;
wire   [0:0] tmp_45_fu_881_p2;
wire   [0:0] tmp_44_fu_875_p2;
wire   [0:0] ret_V2_i2_fu_887_p2;
wire   [15:0] tmp_46_fu_901_p4;
wire   [15:0] r_V_3_fu_893_p3;
wire   [28:0] grp_fu_925_p0;
wire   [3:0] grp_fu_925_p1;
wire   [28:0] grp_fu_925_p2;
wire   [3:0] tmp_49_fu_935_p1;
wire   [5:0] tmp_50_fu_947_p1;
wire   [6:0] p_shl4_cast_fu_939_p3;
wire   [6:0] p_shl5_cast_fu_951_p3;
wire   [6:0] tmp_22_cast_fu_982_p1;
wire   [6:0] tmp_52_fu_986_p2;
wire  signed [19:0] tmp_23_fu_999_p0;
wire  signed [31:0] mul_fu_1016_p0;
wire   [64:0] neg_mul_fu_1032_p2;
wire   [22:0] tmp_54_fu_1037_p4;
wire  signed [24:0] trunc_fu_1053_p1;
wire   [24:0] neg_ti_fu_1056_p2;
wire  signed [24:0] tmp_56_fu_1062_p1;
wire   [24:0] tmp_62_fu_1065_p3;
wire  signed [24:0] tmp_20_fu_1087_p1;
wire   [10:0] grp_fu_1098_p1;
wire   [31:0] grp_fu_1107_p0;
wire  signed [31:0] mul7_fu_1128_p0;
wire   [64:0] neg_mul8_fu_1144_p2;
wire   [21:0] tmp_64_fu_1149_p4;
wire   [21:0] p_v2_v_fu_1159_p3;
wire   [21:0] neg_ti1_fu_1165_p2;
wire   [21:0] tmp_66_fu_1171_p3;
wire  signed [31:0] tmp5_cast_fu_1183_p1;
wire   [0:0] tmp_68_fu_1198_p3;
wire   [0:0] tmp_67_fu_1191_p3;
wire   [0:0] tmp_69_fu_1205_p3;
wire   [0:0] tmp_58_fu_1218_p2;
wire   [0:0] tmp_57_fu_1212_p2;
wire   [0:0] ret_V2_i4_fu_1223_p2;
wire   [0:0] tmp_71_fu_1246_p3;
wire   [14:0] tmp_70_fu_1237_p4;
wire   [15:0] tmp_59_fu_1253_p3;
wire   [15:0] r_V_4_fu_1229_p3;
wire   [11:0] tmp_61_fu_1267_p4;
wire   [15:0] tmp_60_fu_1261_p2;
wire   [27:0] ret_V_4_fu_1276_p3;
wire   [27:0] ret_V_fu_1298_p0;
wire   [37:0] mul1_fu_1307_p0;
wire   [22:0] tmp_72_fu_1313_p4;
wire   [31:0] tmp_28_fu_1322_p1;
wire   [27:0] mul2_fu_1343_p0;
wire   [56:0] mul2_fu_1343_p2;
wire  signed [31:0] tmp_35_fu_1357_p0;
wire  signed [31:0] mul3_fu_1374_p0;
wire   [64:0] neg_mul1_fu_1390_p2;
wire   [15:0] tmp_75_fu_1395_p4;
wire  signed [31:0] tmp_76_fu_1405_p1;
wire  signed [31:0] tmp_78_fu_1409_p1;
wire   [31:0] tmp_79_fu_1412_p3;
wire   [31:0] neg_ti2_fu_1419_p2;
wire   [0:0] tmp_38_fu_1443_p2;
wire   [0:0] tmp_39_fu_1449_p2;
wire  signed [31:0] tmp_80_fu_1489_p1;
wire  signed [31:0] mul4_fu_1501_p1;
wire   [64:0] neg_mul2_fu_1537_p2;
wire   [22:0] tmp_81_fu_1542_p4;
wire   [22:0] p_v_v_fu_1552_p3;
wire   [7:0] tmp_83_fu_1558_p1;
wire   [7:0] neg_ti3_fu_1562_p2;
wire   [7:0] tmp_84_fu_1568_p1;
wire   [10:0] tmp_10_fu_1580_p1;
reg    grp_fu_925_ap_start;
wire    grp_fu_925_ap_done;
reg    grp_fu_1098_ap_start;
wire    grp_fu_1098_ap_done;
reg    grp_fu_1107_ap_start;
wire    grp_fu_1107_ap_done;
reg   [134:0] ap_NS_fsm;
wire   [75:0] mul1_fu_1307_p00;
wire   [56:0] mul2_fu_1343_p00;
wire   [37:0] ret_V_fu_1298_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 135'd1;
#0 input_stream_V_data_V_0_sel_rd = 1'b0;
#0 input_stream_V_data_V_0_sel_wr = 1'b0;
#0 input_stream_V_data_V_0_state = 2'd0;
#0 input_stream_V_keep_V_0_sel_rd = 1'b0;
#0 input_stream_V_keep_V_0_sel_wr = 1'b0;
#0 input_stream_V_keep_V_0_state = 2'd0;
#0 input_stream_V_strb_V_0_sel_rd = 1'b0;
#0 input_stream_V_strb_V_0_sel_wr = 1'b0;
#0 input_stream_V_strb_V_0_state = 2'd0;
#0 input_stream_V_user_V_0_sel_rd = 1'b0;
#0 input_stream_V_user_V_0_sel_wr = 1'b0;
#0 input_stream_V_user_V_0_state = 2'd0;
#0 input_stream_V_id_V_0_sel_rd = 1'b0;
#0 input_stream_V_id_V_0_sel_wr = 1'b0;
#0 input_stream_V_id_V_0_state = 2'd0;
#0 input_stream_V_dest_V_0_sel_rd = 1'b0;
#0 input_stream_V_dest_V_0_sel_wr = 1'b0;
#0 input_stream_V_dest_V_0_state = 2'd0;
#0 output_stream_V_data_V_1_sel_rd = 1'b0;
#0 output_stream_V_data_V_1_sel_wr = 1'b0;
#0 output_stream_V_data_V_1_state = 2'd0;
#0 output_stream_V_keep_V_1_sel_rd = 1'b0;
#0 output_stream_V_keep_V_1_sel_wr = 1'b0;
#0 output_stream_V_keep_V_1_state = 2'd0;
#0 output_stream_V_strb_V_1_sel_rd = 1'b0;
#0 output_stream_V_strb_V_1_sel_wr = 1'b0;
#0 output_stream_V_strb_V_1_state = 2'd0;
#0 output_stream_V_user_V_1_sel_rd = 1'b0;
#0 output_stream_V_user_V_1_sel_wr = 1'b0;
#0 output_stream_V_user_V_1_state = 2'd0;
#0 output_stream_V_last_V_1_sel_rd = 1'b0;
#0 output_stream_V_last_V_1_sel_wr = 1'b0;
#0 output_stream_V_last_V_1_state = 2'd0;
#0 output_stream_V_id_V_1_sel_rd = 1'b0;
#0 output_stream_V_id_V_1_sel_wr = 1'b0;
#0 output_stream_V_id_V_1_state = 2'd0;
#0 output_stream_V_dest_V_1_sel_rd = 1'b0;
#0 output_stream_V_dest_V_1_sel_wr = 1'b0;
#0 output_stream_V_dest_V_1_state = 2'd0;
#0 lfsr_V = 32'd44975;
end

maxCut_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
maxCut_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

maxCut_matrix #(
    .DataWidth( 20 ),
    .AddressRange( 36 ),
    .AddressWidth( 6 ))
matrix_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(matrix_address0),
    .ce0(matrix_ce0),
    .we0(matrix_we0),
    .d0(matrix_d0),
    .q0(matrix_q0)
);

maxCut_currentSolbkb #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
currentSolution_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(currentSolution_address0),
    .ce0(currentSolution_ce0),
    .we0(currentSolution_we0),
    .d0(currentSolution_d0),
    .q0(currentSolution_q0)
);

maxCut_urem_29ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 33 ),
    .din0_WIDTH( 29 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 29 ))
maxCut_urem_29ns_cud_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_925_ap_start),
    .done(grp_fu_925_ap_done),
    .din0(grp_fu_925_p0),
    .din1(grp_fu_925_p1),
    .ce(1'b1),
    .dout(grp_fu_925_p2)
);

maxCut_urem_32ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 32 ))
maxCut_urem_32ns_dEe_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_1098_ap_start),
    .done(grp_fu_1098_ap_done),
    .din0(tmp_20_reg_1799),
    .din1(grp_fu_1098_p1),
    .ce(1'b1),
    .dout(grp_fu_1098_p2)
);

maxCut_sdiv_32ns_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
maxCut_sdiv_32ns_eOg_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_1107_ap_start),
    .done(grp_fu_1107_ap_done),
    .din0(grp_fu_1107_p0),
    .din1(temperature_fu_228),
    .ce(1'b1),
    .dout(grp_fu_1107_p2)
);

maxCut_mul_mul_8sfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 19 ))
maxCut_mul_mul_8sfYi_U4(
    .din0(input_stream_V_data_V_0_data_out),
    .din1(tmp_10_fu_1580_p1),
    .dout(tmp_10_fu_1580_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_stream_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((input_stream_V_data_V_0_ack_out == 1'b1) & (input_stream_V_data_V_0_vld_out == 1'b1))) begin
            input_stream_V_data_V_0_sel_rd <= ~input_stream_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_stream_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((input_stream_V_data_V_0_ack_in == 1'b1) & (input_stream_V_data_V_0_vld_in == 1'b1))) begin
            input_stream_V_data_V_0_sel_wr <= ~input_stream_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_stream_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((input_stream_V_data_V_0_vld_in == 1'b0) & (input_stream_V_data_V_0_state == 2'd2)) | ((input_stream_V_data_V_0_vld_in == 1'b0) & (input_stream_V_data_V_0_ack_out == 1'b1) & (input_stream_V_data_V_0_state == 2'd3)))) begin
            input_stream_V_data_V_0_state <= 2'd2;
        end else if ((((input_stream_V_data_V_0_ack_out == 1'b0) & (input_stream_V_data_V_0_state == 2'd1)) | ((input_stream_V_data_V_0_ack_out == 1'b0) & (input_stream_V_data_V_0_vld_in == 1'b1) & (input_stream_V_data_V_0_state == 2'd3)))) begin
            input_stream_V_data_V_0_state <= 2'd1;
        end else if (((~((input_stream_V_data_V_0_vld_in == 1'b0) & (input_stream_V_data_V_0_ack_out == 1'b1)) & ~((input_stream_V_data_V_0_ack_out == 1'b0) & (input_stream_V_data_V_0_vld_in == 1'b1)) & (input_stream_V_data_V_0_state == 2'd3)) | ((input_stream_V_data_V_0_ack_out == 1'b1) & (input_stream_V_data_V_0_state == 2'd1)) | ((input_stream_V_data_V_0_vld_in == 1'b1) & (input_stream_V_data_V_0_state == 2'd2)))) begin
            input_stream_V_data_V_0_state <= 2'd3;
        end else begin
            input_stream_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_stream_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((input_stream_V_dest_V_0_ack_out == 1'b1) & (input_stream_V_dest_V_0_vld_out == 1'b1))) begin
            input_stream_V_dest_V_0_sel_rd <= ~input_stream_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_stream_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((input_stream_V_dest_V_0_ack_in == 1'b1) & (input_stream_V_dest_V_0_vld_in == 1'b1))) begin
            input_stream_V_dest_V_0_sel_wr <= ~input_stream_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_stream_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((input_stream_V_dest_V_0_vld_in == 1'b0) & (input_stream_V_dest_V_0_state == 2'd2)) | ((input_stream_V_dest_V_0_vld_in == 1'b0) & (input_stream_V_dest_V_0_ack_out == 1'b1) & (input_stream_V_dest_V_0_state == 2'd3)))) begin
            input_stream_V_dest_V_0_state <= 2'd2;
        end else if ((((input_stream_V_dest_V_0_ack_out == 1'b0) & (input_stream_V_dest_V_0_state == 2'd1)) | ((input_stream_V_dest_V_0_ack_out == 1'b0) & (input_stream_V_dest_V_0_vld_in == 1'b1) & (input_stream_V_dest_V_0_state == 2'd3)))) begin
            input_stream_V_dest_V_0_state <= 2'd1;
        end else if (((~((input_stream_V_dest_V_0_vld_in == 1'b0) & (input_stream_V_dest_V_0_ack_out == 1'b1)) & ~((input_stream_V_dest_V_0_ack_out == 1'b0) & (input_stream_V_dest_V_0_vld_in == 1'b1)) & (input_stream_V_dest_V_0_state == 2'd3)) | ((input_stream_V_dest_V_0_ack_out == 1'b1) & (input_stream_V_dest_V_0_state == 2'd1)) | ((input_stream_V_dest_V_0_vld_in == 1'b1) & (input_stream_V_dest_V_0_state == 2'd2)))) begin
            input_stream_V_dest_V_0_state <= 2'd3;
        end else begin
            input_stream_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_stream_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((input_stream_V_id_V_0_ack_out == 1'b1) & (input_stream_V_id_V_0_vld_out == 1'b1))) begin
            input_stream_V_id_V_0_sel_rd <= ~input_stream_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_stream_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((input_stream_V_id_V_0_ack_in == 1'b1) & (input_stream_V_id_V_0_vld_in == 1'b1))) begin
            input_stream_V_id_V_0_sel_wr <= ~input_stream_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_stream_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((input_stream_V_id_V_0_vld_in == 1'b0) & (input_stream_V_id_V_0_state == 2'd2)) | ((input_stream_V_id_V_0_vld_in == 1'b0) & (input_stream_V_id_V_0_ack_out == 1'b1) & (input_stream_V_id_V_0_state == 2'd3)))) begin
            input_stream_V_id_V_0_state <= 2'd2;
        end else if ((((input_stream_V_id_V_0_ack_out == 1'b0) & (input_stream_V_id_V_0_state == 2'd1)) | ((input_stream_V_id_V_0_ack_out == 1'b0) & (input_stream_V_id_V_0_vld_in == 1'b1) & (input_stream_V_id_V_0_state == 2'd3)))) begin
            input_stream_V_id_V_0_state <= 2'd1;
        end else if (((~((input_stream_V_id_V_0_vld_in == 1'b0) & (input_stream_V_id_V_0_ack_out == 1'b1)) & ~((input_stream_V_id_V_0_ack_out == 1'b0) & (input_stream_V_id_V_0_vld_in == 1'b1)) & (input_stream_V_id_V_0_state == 2'd3)) | ((input_stream_V_id_V_0_ack_out == 1'b1) & (input_stream_V_id_V_0_state == 2'd1)) | ((input_stream_V_id_V_0_vld_in == 1'b1) & (input_stream_V_id_V_0_state == 2'd2)))) begin
            input_stream_V_id_V_0_state <= 2'd3;
        end else begin
            input_stream_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_stream_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((input_stream_V_keep_V_0_ack_out == 1'b1) & (input_stream_V_keep_V_0_vld_out == 1'b1))) begin
            input_stream_V_keep_V_0_sel_rd <= ~input_stream_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_stream_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((input_stream_V_keep_V_0_ack_in == 1'b1) & (input_stream_V_keep_V_0_vld_in == 1'b1))) begin
            input_stream_V_keep_V_0_sel_wr <= ~input_stream_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_stream_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((input_stream_V_keep_V_0_vld_in == 1'b0) & (input_stream_V_keep_V_0_state == 2'd2)) | ((input_stream_V_keep_V_0_vld_in == 1'b0) & (input_stream_V_keep_V_0_ack_out == 1'b1) & (input_stream_V_keep_V_0_state == 2'd3)))) begin
            input_stream_V_keep_V_0_state <= 2'd2;
        end else if ((((input_stream_V_keep_V_0_ack_out == 1'b0) & (input_stream_V_keep_V_0_state == 2'd1)) | ((input_stream_V_keep_V_0_ack_out == 1'b0) & (input_stream_V_keep_V_0_vld_in == 1'b1) & (input_stream_V_keep_V_0_state == 2'd3)))) begin
            input_stream_V_keep_V_0_state <= 2'd1;
        end else if (((~((input_stream_V_keep_V_0_vld_in == 1'b0) & (input_stream_V_keep_V_0_ack_out == 1'b1)) & ~((input_stream_V_keep_V_0_ack_out == 1'b0) & (input_stream_V_keep_V_0_vld_in == 1'b1)) & (input_stream_V_keep_V_0_state == 2'd3)) | ((input_stream_V_keep_V_0_ack_out == 1'b1) & (input_stream_V_keep_V_0_state == 2'd1)) | ((input_stream_V_keep_V_0_vld_in == 1'b1) & (input_stream_V_keep_V_0_state == 2'd2)))) begin
            input_stream_V_keep_V_0_state <= 2'd3;
        end else begin
            input_stream_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_stream_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((input_stream_V_strb_V_0_ack_out == 1'b1) & (input_stream_V_strb_V_0_vld_out == 1'b1))) begin
            input_stream_V_strb_V_0_sel_rd <= ~input_stream_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_stream_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((input_stream_V_strb_V_0_ack_in == 1'b1) & (input_stream_V_strb_V_0_vld_in == 1'b1))) begin
            input_stream_V_strb_V_0_sel_wr <= ~input_stream_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_stream_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((input_stream_V_strb_V_0_vld_in == 1'b0) & (input_stream_V_strb_V_0_state == 2'd2)) | ((input_stream_V_strb_V_0_vld_in == 1'b0) & (input_stream_V_strb_V_0_ack_out == 1'b1) & (input_stream_V_strb_V_0_state == 2'd3)))) begin
            input_stream_V_strb_V_0_state <= 2'd2;
        end else if ((((input_stream_V_strb_V_0_ack_out == 1'b0) & (input_stream_V_strb_V_0_state == 2'd1)) | ((input_stream_V_strb_V_0_ack_out == 1'b0) & (input_stream_V_strb_V_0_vld_in == 1'b1) & (input_stream_V_strb_V_0_state == 2'd3)))) begin
            input_stream_V_strb_V_0_state <= 2'd1;
        end else if (((~((input_stream_V_strb_V_0_vld_in == 1'b0) & (input_stream_V_strb_V_0_ack_out == 1'b1)) & ~((input_stream_V_strb_V_0_ack_out == 1'b0) & (input_stream_V_strb_V_0_vld_in == 1'b1)) & (input_stream_V_strb_V_0_state == 2'd3)) | ((input_stream_V_strb_V_0_ack_out == 1'b1) & (input_stream_V_strb_V_0_state == 2'd1)) | ((input_stream_V_strb_V_0_vld_in == 1'b1) & (input_stream_V_strb_V_0_state == 2'd2)))) begin
            input_stream_V_strb_V_0_state <= 2'd3;
        end else begin
            input_stream_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_stream_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((input_stream_V_user_V_0_ack_out == 1'b1) & (input_stream_V_user_V_0_vld_out == 1'b1))) begin
            input_stream_V_user_V_0_sel_rd <= ~input_stream_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_stream_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((input_stream_V_user_V_0_ack_in == 1'b1) & (input_stream_V_user_V_0_vld_in == 1'b1))) begin
            input_stream_V_user_V_0_sel_wr <= ~input_stream_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_stream_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((input_stream_V_user_V_0_vld_in == 1'b0) & (input_stream_V_user_V_0_state == 2'd2)) | ((input_stream_V_user_V_0_vld_in == 1'b0) & (input_stream_V_user_V_0_ack_out == 1'b1) & (input_stream_V_user_V_0_state == 2'd3)))) begin
            input_stream_V_user_V_0_state <= 2'd2;
        end else if ((((input_stream_V_user_V_0_ack_out == 1'b0) & (input_stream_V_user_V_0_state == 2'd1)) | ((input_stream_V_user_V_0_ack_out == 1'b0) & (input_stream_V_user_V_0_vld_in == 1'b1) & (input_stream_V_user_V_0_state == 2'd3)))) begin
            input_stream_V_user_V_0_state <= 2'd1;
        end else if (((~((input_stream_V_user_V_0_vld_in == 1'b0) & (input_stream_V_user_V_0_ack_out == 1'b1)) & ~((input_stream_V_user_V_0_ack_out == 1'b0) & (input_stream_V_user_V_0_vld_in == 1'b1)) & (input_stream_V_user_V_0_state == 2'd3)) | ((input_stream_V_user_V_0_ack_out == 1'b1) & (input_stream_V_user_V_0_state == 2'd1)) | ((input_stream_V_user_V_0_vld_in == 1'b1) & (input_stream_V_user_V_0_state == 2'd2)))) begin
            input_stream_V_user_V_0_state <= 2'd3;
        end else begin
            input_stream_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_stream_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_stream_V_data_V_1_ack_out == 1'b1) & (output_stream_V_data_V_1_vld_out == 1'b1))) begin
            output_stream_V_data_V_1_sel_rd <= ~output_stream_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_stream_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((output_stream_V_data_V_1_ack_in == 1'b1) & (output_stream_V_data_V_1_vld_in == 1'b1))) begin
            output_stream_V_data_V_1_sel_wr <= ~output_stream_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_stream_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((output_stream_V_data_V_1_vld_in == 1'b0) & (output_stream_V_data_V_1_state == 2'd2)) | ((output_stream_V_data_V_1_vld_in == 1'b0) & (output_stream_V_data_V_1_ack_out == 1'b1) & (output_stream_V_data_V_1_state == 2'd3)))) begin
            output_stream_V_data_V_1_state <= 2'd2;
        end else if ((((output_stream_V_data_V_1_ack_out == 1'b0) & (output_stream_V_data_V_1_state == 2'd1)) | ((output_stream_V_data_V_1_ack_out == 1'b0) & (output_stream_V_data_V_1_vld_in == 1'b1) & (output_stream_V_data_V_1_state == 2'd3)))) begin
            output_stream_V_data_V_1_state <= 2'd1;
        end else if (((~((output_stream_V_data_V_1_vld_in == 1'b0) & (output_stream_V_data_V_1_ack_out == 1'b1)) & ~((output_stream_V_data_V_1_ack_out == 1'b0) & (output_stream_V_data_V_1_vld_in == 1'b1)) & (output_stream_V_data_V_1_state == 2'd3)) | ((output_stream_V_data_V_1_ack_out == 1'b1) & (output_stream_V_data_V_1_state == 2'd1)) | ((output_stream_V_data_V_1_vld_in == 1'b1) & (output_stream_V_data_V_1_state == 2'd2)))) begin
            output_stream_V_data_V_1_state <= 2'd3;
        end else begin
            output_stream_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_stream_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_stream_V_dest_V_1_ack_out == 1'b1) & (output_stream_V_dest_V_1_vld_out == 1'b1))) begin
            output_stream_V_dest_V_1_sel_rd <= ~output_stream_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_stream_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((output_stream_V_dest_V_1_ack_in == 1'b1) & (output_stream_V_dest_V_1_vld_in == 1'b1))) begin
            output_stream_V_dest_V_1_sel_wr <= ~output_stream_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_stream_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((output_stream_V_dest_V_1_vld_in == 1'b0) & (output_stream_V_dest_V_1_state == 2'd2)) | ((output_stream_V_dest_V_1_vld_in == 1'b0) & (output_stream_V_dest_V_1_ack_out == 1'b1) & (output_stream_V_dest_V_1_state == 2'd3)))) begin
            output_stream_V_dest_V_1_state <= 2'd2;
        end else if ((((output_stream_V_dest_V_1_ack_out == 1'b0) & (output_stream_V_dest_V_1_state == 2'd1)) | ((output_stream_V_dest_V_1_ack_out == 1'b0) & (output_stream_V_dest_V_1_vld_in == 1'b1) & (output_stream_V_dest_V_1_state == 2'd3)))) begin
            output_stream_V_dest_V_1_state <= 2'd1;
        end else if (((~((output_stream_V_dest_V_1_vld_in == 1'b0) & (output_stream_V_dest_V_1_ack_out == 1'b1)) & ~((output_stream_V_dest_V_1_ack_out == 1'b0) & (output_stream_V_dest_V_1_vld_in == 1'b1)) & (output_stream_V_dest_V_1_state == 2'd3)) | ((output_stream_V_dest_V_1_ack_out == 1'b1) & (output_stream_V_dest_V_1_state == 2'd1)) | ((output_stream_V_dest_V_1_vld_in == 1'b1) & (output_stream_V_dest_V_1_state == 2'd2)))) begin
            output_stream_V_dest_V_1_state <= 2'd3;
        end else begin
            output_stream_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_stream_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_stream_V_id_V_1_ack_out == 1'b1) & (output_stream_V_id_V_1_vld_out == 1'b1))) begin
            output_stream_V_id_V_1_sel_rd <= ~output_stream_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_stream_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((output_stream_V_id_V_1_ack_in == 1'b1) & (output_stream_V_id_V_1_vld_in == 1'b1))) begin
            output_stream_V_id_V_1_sel_wr <= ~output_stream_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_stream_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((output_stream_V_id_V_1_vld_in == 1'b0) & (output_stream_V_id_V_1_state == 2'd2)) | ((output_stream_V_id_V_1_vld_in == 1'b0) & (output_stream_V_id_V_1_ack_out == 1'b1) & (output_stream_V_id_V_1_state == 2'd3)))) begin
            output_stream_V_id_V_1_state <= 2'd2;
        end else if ((((output_stream_V_id_V_1_ack_out == 1'b0) & (output_stream_V_id_V_1_state == 2'd1)) | ((output_stream_V_id_V_1_ack_out == 1'b0) & (output_stream_V_id_V_1_vld_in == 1'b1) & (output_stream_V_id_V_1_state == 2'd3)))) begin
            output_stream_V_id_V_1_state <= 2'd1;
        end else if (((~((output_stream_V_id_V_1_vld_in == 1'b0) & (output_stream_V_id_V_1_ack_out == 1'b1)) & ~((output_stream_V_id_V_1_ack_out == 1'b0) & (output_stream_V_id_V_1_vld_in == 1'b1)) & (output_stream_V_id_V_1_state == 2'd3)) | ((output_stream_V_id_V_1_ack_out == 1'b1) & (output_stream_V_id_V_1_state == 2'd1)) | ((output_stream_V_id_V_1_vld_in == 1'b1) & (output_stream_V_id_V_1_state == 2'd2)))) begin
            output_stream_V_id_V_1_state <= 2'd3;
        end else begin
            output_stream_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_stream_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_stream_V_keep_V_1_ack_out == 1'b1) & (output_stream_V_keep_V_1_vld_out == 1'b1))) begin
            output_stream_V_keep_V_1_sel_rd <= ~output_stream_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_stream_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((output_stream_V_keep_V_1_ack_in == 1'b1) & (output_stream_V_keep_V_1_vld_in == 1'b1))) begin
            output_stream_V_keep_V_1_sel_wr <= ~output_stream_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_stream_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((output_stream_V_keep_V_1_vld_in == 1'b0) & (output_stream_V_keep_V_1_state == 2'd2)) | ((output_stream_V_keep_V_1_vld_in == 1'b0) & (output_stream_V_keep_V_1_ack_out == 1'b1) & (output_stream_V_keep_V_1_state == 2'd3)))) begin
            output_stream_V_keep_V_1_state <= 2'd2;
        end else if ((((output_stream_V_keep_V_1_ack_out == 1'b0) & (output_stream_V_keep_V_1_state == 2'd1)) | ((output_stream_V_keep_V_1_ack_out == 1'b0) & (output_stream_V_keep_V_1_vld_in == 1'b1) & (output_stream_V_keep_V_1_state == 2'd3)))) begin
            output_stream_V_keep_V_1_state <= 2'd1;
        end else if (((~((output_stream_V_keep_V_1_vld_in == 1'b0) & (output_stream_V_keep_V_1_ack_out == 1'b1)) & ~((output_stream_V_keep_V_1_ack_out == 1'b0) & (output_stream_V_keep_V_1_vld_in == 1'b1)) & (output_stream_V_keep_V_1_state == 2'd3)) | ((output_stream_V_keep_V_1_ack_out == 1'b1) & (output_stream_V_keep_V_1_state == 2'd1)) | ((output_stream_V_keep_V_1_vld_in == 1'b1) & (output_stream_V_keep_V_1_state == 2'd2)))) begin
            output_stream_V_keep_V_1_state <= 2'd3;
        end else begin
            output_stream_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_stream_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_stream_V_last_V_1_ack_out == 1'b1) & (output_stream_V_last_V_1_vld_out == 1'b1))) begin
            output_stream_V_last_V_1_sel_rd <= ~output_stream_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_stream_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((output_stream_V_last_V_1_ack_in == 1'b1) & (output_stream_V_last_V_1_vld_in == 1'b1))) begin
            output_stream_V_last_V_1_sel_wr <= ~output_stream_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_stream_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((output_stream_V_last_V_1_vld_in == 1'b0) & (output_stream_V_last_V_1_state == 2'd2)) | ((output_stream_V_last_V_1_vld_in == 1'b0) & (output_stream_V_last_V_1_ack_out == 1'b1) & (output_stream_V_last_V_1_state == 2'd3)))) begin
            output_stream_V_last_V_1_state <= 2'd2;
        end else if ((((output_stream_V_last_V_1_ack_out == 1'b0) & (output_stream_V_last_V_1_state == 2'd1)) | ((output_stream_V_last_V_1_ack_out == 1'b0) & (output_stream_V_last_V_1_vld_in == 1'b1) & (output_stream_V_last_V_1_state == 2'd3)))) begin
            output_stream_V_last_V_1_state <= 2'd1;
        end else if (((~((output_stream_V_last_V_1_vld_in == 1'b0) & (output_stream_V_last_V_1_ack_out == 1'b1)) & ~((output_stream_V_last_V_1_ack_out == 1'b0) & (output_stream_V_last_V_1_vld_in == 1'b1)) & (output_stream_V_last_V_1_state == 2'd3)) | ((output_stream_V_last_V_1_ack_out == 1'b1) & (output_stream_V_last_V_1_state == 2'd1)) | ((output_stream_V_last_V_1_vld_in == 1'b1) & (output_stream_V_last_V_1_state == 2'd2)))) begin
            output_stream_V_last_V_1_state <= 2'd3;
        end else begin
            output_stream_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_stream_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_stream_V_strb_V_1_ack_out == 1'b1) & (output_stream_V_strb_V_1_vld_out == 1'b1))) begin
            output_stream_V_strb_V_1_sel_rd <= ~output_stream_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_stream_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((output_stream_V_strb_V_1_ack_in == 1'b1) & (output_stream_V_strb_V_1_vld_in == 1'b1))) begin
            output_stream_V_strb_V_1_sel_wr <= ~output_stream_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_stream_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((output_stream_V_strb_V_1_vld_in == 1'b0) & (output_stream_V_strb_V_1_state == 2'd2)) | ((output_stream_V_strb_V_1_vld_in == 1'b0) & (output_stream_V_strb_V_1_ack_out == 1'b1) & (output_stream_V_strb_V_1_state == 2'd3)))) begin
            output_stream_V_strb_V_1_state <= 2'd2;
        end else if ((((output_stream_V_strb_V_1_ack_out == 1'b0) & (output_stream_V_strb_V_1_state == 2'd1)) | ((output_stream_V_strb_V_1_ack_out == 1'b0) & (output_stream_V_strb_V_1_vld_in == 1'b1) & (output_stream_V_strb_V_1_state == 2'd3)))) begin
            output_stream_V_strb_V_1_state <= 2'd1;
        end else if (((~((output_stream_V_strb_V_1_vld_in == 1'b0) & (output_stream_V_strb_V_1_ack_out == 1'b1)) & ~((output_stream_V_strb_V_1_ack_out == 1'b0) & (output_stream_V_strb_V_1_vld_in == 1'b1)) & (output_stream_V_strb_V_1_state == 2'd3)) | ((output_stream_V_strb_V_1_ack_out == 1'b1) & (output_stream_V_strb_V_1_state == 2'd1)) | ((output_stream_V_strb_V_1_vld_in == 1'b1) & (output_stream_V_strb_V_1_state == 2'd2)))) begin
            output_stream_V_strb_V_1_state <= 2'd3;
        end else begin
            output_stream_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_stream_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_stream_V_user_V_1_ack_out == 1'b1) & (output_stream_V_user_V_1_vld_out == 1'b1))) begin
            output_stream_V_user_V_1_sel_rd <= ~output_stream_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_stream_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((output_stream_V_user_V_1_ack_in == 1'b1) & (output_stream_V_user_V_1_vld_in == 1'b1))) begin
            output_stream_V_user_V_1_sel_wr <= ~output_stream_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_stream_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((output_stream_V_user_V_1_vld_in == 1'b0) & (output_stream_V_user_V_1_state == 2'd2)) | ((output_stream_V_user_V_1_vld_in == 1'b0) & (output_stream_V_user_V_1_ack_out == 1'b1) & (output_stream_V_user_V_1_state == 2'd3)))) begin
            output_stream_V_user_V_1_state <= 2'd2;
        end else if ((((output_stream_V_user_V_1_ack_out == 1'b0) & (output_stream_V_user_V_1_state == 2'd1)) | ((output_stream_V_user_V_1_ack_out == 1'b0) & (output_stream_V_user_V_1_vld_in == 1'b1) & (output_stream_V_user_V_1_state == 2'd3)))) begin
            output_stream_V_user_V_1_state <= 2'd1;
        end else if (((~((output_stream_V_user_V_1_vld_in == 1'b0) & (output_stream_V_user_V_1_ack_out == 1'b1)) & ~((output_stream_V_user_V_1_ack_out == 1'b0) & (output_stream_V_user_V_1_vld_in == 1'b1)) & (output_stream_V_user_V_1_state == 2'd3)) | ((output_stream_V_user_V_1_ack_out == 1'b1) & (output_stream_V_user_V_1_state == 2'd1)) | ((output_stream_V_user_V_1_vld_in == 1'b1) & (output_stream_V_user_V_1_state == 2'd2)))) begin
            output_stream_V_user_V_1_state <= 2'd3;
        end else begin
            output_stream_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_555_p2 == 1'd0))) begin
        invdar1_reg_355 <= indvarinc1_fu_535_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        invdar1_reg_355 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_567_p2 == 1'd1))) begin
        invdar2_reg_388 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (tmp_4_fu_702_p2 == 1'd0))) begin
        invdar2_reg_388 <= indvarinc2_fu_691_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_555_p2 == 1'd1) & (tmp_3_fu_561_p2 == 1'd0))) begin
        invdar_reg_343 <= indvarinc_reg_1586;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        invdar_reg_343 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state125)) begin
                lfsr_V[15 : 0] <= ret_V_5_cast_fu_1284_p1[15 : 0];
    end else if (((1'b1 == ap_CS_fsm_state8) & (exitcond3_fu_708_p2 == 1'd0))) begin
                lfsr_V[15 : 0] <= ret_V_1_cast_fu_806_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        localFieldVal_reg_444 <= localFieldVal_1_fu_1072_p2;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        localFieldVal_reg_444 <= 25'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (exitcond3_fu_708_p2 == 1'd1))) begin
        p_4_reg_410 <= 18'd0;
    end else if (((1'b1 == ap_CS_fsm_state130) & (tmp_17_reg_1691 == 1'd1) & (or_cond_fu_1454_p2 == 1'd0) & (tmp_37_fu_1437_p2 == 1'd0))) begin
        p_4_reg_410 <= iterate_V_reg_1695;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        p_6_reg_433 <= j_V_1_reg_1737;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        p_6_reg_433 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (tmp_4_fu_702_p2 == 1'd1))) begin
        p_s_reg_399 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (exitcond3_fu_708_p2 == 1'd0))) begin
        p_s_reg_399 <= i_V_1_fu_714_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (exitcond3_fu_708_p2 == 1'd1))) begin
        phi_mul_reg_421 <= 28'd1000;
    end else if (((1'b1 == ap_CS_fsm_state130) & (tmp_17_reg_1691 == 1'd1) & (or_cond_fu_1454_p2 == 1'd0) & (tmp_37_fu_1437_p2 == 1'd0))) begin
        phi_mul_reg_421 <= phitmp_fu_1460_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state50) & (tmp_21_fu_1093_p2 == 1'd1))) begin
        prob_reg_456 <= 32'd1000;
    end else if (((1'b1 == ap_CS_fsm_state125) & (tmp_21_reg_1807 == 1'd0))) begin
        prob_reg_456 <= tmp_44_i_fu_1186_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_567_p2 == 1'd0))) begin
        t_V_1_reg_377 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        t_V_1_reg_377 <= j_V_reg_1653;
    end
end

always @ (posedge ap_clk) begin
    if (((output_stream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state135))) begin
        t_V_2_reg_467 <= i_V_2_reg_1916;
    end else if (((1'b1 == ap_CS_fsm_state130) & ((tmp_17_reg_1691 == 1'd0) | ((or_cond_fu_1454_p2 == 1'd1) | (tmp_37_fu_1437_p2 == 1'd1))))) begin
        t_V_2_reg_467 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((input_stream_V_data_V_0_vld_out == 1'b0) & (exitcond2_fu_609_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_609_p2 == 1'd1))) begin
        t_V_reg_366 <= i_V_reg_1640;
    end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_3_fu_561_p2 == 1'd1) & (tmp_2_fu_555_p2 == 1'd1))) begin
        t_V_reg_366 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state129)) begin
        temperature_fu_228 <= tmp_36_fu_1425_p3;
    end else if (((1'b1 == ap_CS_fsm_state8) & (exitcond3_fu_708_p2 == 1'd1))) begin
        temperature_fu_228 <= 32'd20000;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) & (exitcond8_fu_965_p2 == 1'd1))) begin
        currentSolution_addr_2_reg_1752 <= tmp_18_reg_1724;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        deltaEnergy_reg_1811 <= grp_fu_1098_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((output_stream_V_dest_V_1_ack_in == 1'b0) | (output_stream_V_id_V_1_ack_in == 1'b0) | (output_stream_V_last_V_1_ack_in == 1'b0) | (output_stream_V_user_V_1_ack_in == 1'b0) | (output_stream_V_strb_V_1_ack_in == 1'b0) | (output_stream_V_keep_V_1_ack_in == 1'b0) | (output_stream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state131))) begin
        i_V_2_reg_1916 <= i_V_2_fu_1472_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_V_reg_1640 <= i_V_fu_573_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvarinc_reg_1586 <= indvarinc_fu_499_p2;
        tmp_1_reg_1591[6 : 1] <= tmp_1_fu_529_p2[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((input_stream_V_data_V_0_load_A == 1'b1)) begin
        input_stream_V_data_V_0_payload_A <= input_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((input_stream_V_data_V_0_load_B == 1'b1)) begin
        input_stream_V_data_V_0_payload_B <= input_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((input_stream_V_dest_V_0_load_A == 1'b1)) begin
        input_stream_V_dest_V_0_payload_A <= input_stream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((input_stream_V_dest_V_0_load_B == 1'b1)) begin
        input_stream_V_dest_V_0_payload_B <= input_stream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((input_stream_V_id_V_0_load_A == 1'b1)) begin
        input_stream_V_id_V_0_payload_A <= input_stream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((input_stream_V_id_V_0_load_B == 1'b1)) begin
        input_stream_V_id_V_0_payload_B <= input_stream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((input_stream_V_keep_V_0_load_A == 1'b1)) begin
        input_stream_V_keep_V_0_payload_A <= input_stream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((input_stream_V_keep_V_0_load_B == 1'b1)) begin
        input_stream_V_keep_V_0_payload_B <= input_stream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((input_stream_V_strb_V_0_load_A == 1'b1)) begin
        input_stream_V_strb_V_0_payload_A <= input_stream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((input_stream_V_strb_V_0_load_B == 1'b1)) begin
        input_stream_V_strb_V_0_payload_B <= input_stream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((input_stream_V_user_V_0_load_A == 1'b1)) begin
        input_stream_V_user_V_0_payload_A <= input_stream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((input_stream_V_user_V_0_load_B == 1'b1)) begin
        input_stream_V_user_V_0_payload_B <= input_stream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        iterate_V_reg_1695 <= iterate_V_fu_841_p2;
        tmp_17_reg_1691 <= tmp_17_fu_835_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        j_V_1_reg_1737 <= j_V_1_fu_971_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((input_stream_V_data_V_0_vld_out == 1'b0) & (exitcond2_fu_609_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state5))) begin
        j_V_reg_1653 <= j_V_fu_615_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        matrix_load_reg_1757 <= matrix_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state126)) begin
        mul1_reg_1870[75 : 3] <= mul1_fu_1307_p2[75 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state128)) begin
        mul3_reg_1892 <= mul3_fu_1374_p2;
        tmp_77_reg_1897 <= {{mul3_fu_1374_p2[64:49]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state133)) begin
        mul4_reg_1937 <= mul4_fu_1501_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state123)) begin
        mul7_reg_1844[64 : 4] <= mul7_fu_1128_p2[64 : 4];
        tmp_65_reg_1849 <= {{mul7_fu_1128_p2[64:43]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        mul_reg_1773[64 : 4] <= mul_fu_1016_p2[64 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((~((output_stream_V_dest_V_1_ack_in == 1'b0) | (output_stream_V_id_V_1_ack_in == 1'b0) | (output_stream_V_last_V_1_ack_in == 1'b0) | (output_stream_V_user_V_1_ack_in == 1'b0) | (output_stream_V_strb_V_1_ack_in == 1'b0) | (output_stream_V_keep_V_1_ack_in == 1'b0) | (output_stream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state131) & (exitcond_fu_1466_p2 == 1'd0))) begin
        output_last_V_reg_1926 <= output_last_V_fu_1483_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((output_stream_V_data_V_1_load_A == 1'b1)) begin
        output_stream_V_data_V_1_payload_A <= fpga_output_V_fu_1572_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((output_stream_V_data_V_1_load_B == 1'b1)) begin
        output_stream_V_data_V_1_payload_B <= fpga_output_V_fu_1572_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((output_stream_V_dest_V_1_load_A == 1'b1)) begin
        output_stream_V_dest_V_1_payload_A <= tmp_dest_V_fu_224;
    end
end

always @ (posedge ap_clk) begin
    if ((output_stream_V_dest_V_1_load_B == 1'b1)) begin
        output_stream_V_dest_V_1_payload_B <= tmp_dest_V_fu_224;
    end
end

always @ (posedge ap_clk) begin
    if ((output_stream_V_id_V_1_load_A == 1'b1)) begin
        output_stream_V_id_V_1_payload_A <= tmp_id_V_fu_220;
    end
end

always @ (posedge ap_clk) begin
    if ((output_stream_V_id_V_1_load_B == 1'b1)) begin
        output_stream_V_id_V_1_payload_B <= tmp_id_V_fu_220;
    end
end

always @ (posedge ap_clk) begin
    if ((output_stream_V_keep_V_1_load_A == 1'b1)) begin
        output_stream_V_keep_V_1_payload_A <= tmp_keep_V_fu_208;
    end
end

always @ (posedge ap_clk) begin
    if ((output_stream_V_keep_V_1_load_B == 1'b1)) begin
        output_stream_V_keep_V_1_payload_B <= tmp_keep_V_fu_208;
    end
end

always @ (posedge ap_clk) begin
    if ((output_stream_V_last_V_1_load_A == 1'b1)) begin
        output_stream_V_last_V_1_payload_A <= output_last_V_reg_1926;
    end
end

always @ (posedge ap_clk) begin
    if ((output_stream_V_last_V_1_load_B == 1'b1)) begin
        output_stream_V_last_V_1_payload_B <= output_last_V_reg_1926;
    end
end

always @ (posedge ap_clk) begin
    if ((output_stream_V_strb_V_1_load_A == 1'b1)) begin
        output_stream_V_strb_V_1_payload_A <= tmp_strb_V_fu_212;
    end
end

always @ (posedge ap_clk) begin
    if ((output_stream_V_strb_V_1_load_B == 1'b1)) begin
        output_stream_V_strb_V_1_payload_B <= tmp_strb_V_fu_212;
    end
end

always @ (posedge ap_clk) begin
    if ((output_stream_V_user_V_1_load_A == 1'b1)) begin
        output_stream_V_user_V_1_payload_A <= tmp_user_V_fu_216;
    end
end

always @ (posedge ap_clk) begin
    if ((output_stream_V_user_V_1_load_B == 1'b1)) begin
        output_stream_V_user_V_1_payload_B <= tmp_user_V_fu_216;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        p_v1_v_reg_1783 <= p_v1_v_fu_1047_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_17_fu_835_p2 == 1'd1))) begin
        r_V_2_reg_1700[15 : 0] <= lfsr_V[15 : 0];
        tmp_43_reg_1709 <= lfsr_V[32'd3];
        tmp_47_reg_1714 <= tmp_47_fu_911_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state132) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state43))) begin
        reg_495 <= currentSolution_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state125)) begin
        ret_V_reg_1865[37 : 3] <= ret_V_fu_1298_p2[37 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state124)) begin
        tmp5_reg_1855 <= tmp5_fu_1177_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((input_stream_V_data_V_0_vld_out == 1'b0) & (exitcond2_fu_609_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_609_p2 == 1'd0))) begin
        tmp_10_reg_1658 <= tmp_10_fu_1580_p2;
        tmp_11_reg_1663 <= tmp_11_fu_653_p2;
        tmp_dest_V_fu_224 <= input_stream_V_dest_V_0_data_out;
        tmp_id_V_fu_220 <= input_stream_V_id_V_0_data_out;
        tmp_keep_V_fu_208 <= input_stream_V_keep_V_0_data_out;
        tmp_strb_V_fu_212 <= input_stream_V_strb_V_0_data_out;
        tmp_user_V_fu_216 <= input_stream_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        tmp_18_reg_1724[28 : 0] <= tmp_18_fu_931_p1[28 : 0];
        tmp_51_reg_1729[6 : 1] <= tmp_51_fu_959_p2[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        tmp_19_reg_1794 <= tmp_19_fu_1078_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        tmp_20_reg_1799 <= tmp_20_fu_1087_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        tmp_21_reg_1807 <= tmp_21_fu_1093_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        tmp_23_reg_1762 <= tmp_23_fu_999_p2;
        tmp_53_reg_1767 <= tmp_23_fu_999_p2[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state127) & (tmp_73_fu_1349_p3 == 1'd0))) begin
        tmp_35_reg_1881 <= tmp_35_fu_1357_p2;
        tmp_74_reg_1886 <= tmp_35_fu_1357_p2[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state45) & (tmp_53_reg_1767 == 1'd0))) begin
        tmp_55_reg_1778 <= {{mul_fu_1016_p2[64:42]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state122)) begin
        tmp_63_reg_1838 <= tmp_i2_fu_1113_p2[32'd31];
        tmp_i2_reg_1833 <= tmp_i2_fu_1113_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state132)) begin
        tmp_80_reg_1931 <= tmp_80_fu_1489_p1[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state133) & (tmp_80_reg_1931 == 1'd0))) begin
        tmp_82_reg_1942 <= {{mul4_fu_1501_p2[64:42]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_567_p2 == 1'd0))) begin
        tmp_8_reg_1645[6 : 1] <= tmp_8_fu_603_p2[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state121)) begin
        x_assign_reg_1826 <= grp_fu_1107_p2;
    end
end

always @ (*) begin
    if ((~((output_stream_V_dest_V_1_ack_in == 1'b0) | (output_stream_V_id_V_1_ack_in == 1'b0) | (output_stream_V_last_V_1_ack_in == 1'b0) | (output_stream_V_user_V_1_ack_in == 1'b0) | (output_stream_V_strb_V_1_ack_in == 1'b0) | (output_stream_V_keep_V_1_ack_in == 1'b0) | (output_stream_V_data_V_1_ack_in == 1'b0)) & (output_stream_V_dest_V_1_state[1'd0] == 1'b0) & (output_stream_V_id_V_1_state[1'd0] == 1'b0) & (output_stream_V_last_V_1_state[1'd0] == 1'b0) & (output_stream_V_user_V_1_state[1'd0] == 1'b0) & (output_stream_V_strb_V_1_state[1'd0] == 1'b0) & (output_stream_V_keep_V_1_state[1'd0] == 1'b0) & (output_stream_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state131) & (exitcond_fu_1466_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((output_stream_V_dest_V_1_ack_in == 1'b0) | (output_stream_V_id_V_1_ack_in == 1'b0) | (output_stream_V_last_V_1_ack_in == 1'b0) | (output_stream_V_user_V_1_ack_in == 1'b0) | (output_stream_V_strb_V_1_ack_in == 1'b0) | (output_stream_V_keep_V_1_ack_in == 1'b0) | (output_stream_V_data_V_1_ack_in == 1'b0)) & (output_stream_V_dest_V_1_state[1'd0] == 1'b0) & (output_stream_V_id_V_1_state[1'd0] == 1'b0) & (output_stream_V_last_V_1_state[1'd0] == 1'b0) & (output_stream_V_user_V_1_state[1'd0] == 1'b0) & (output_stream_V_strb_V_1_state[1'd0] == 1'b0) & (output_stream_V_keep_V_1_state[1'd0] == 1'b0) & (output_stream_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state131) & (exitcond_fu_1466_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state131)) begin
        currentSolution_address0 = tmp_40_fu_1478_p1;
    end else if ((1'b1 == ap_CS_fsm_state127)) begin
        currentSolution_address0 = currentSolution_addr_2_reg_1752;
    end else if (((1'b1 == ap_CS_fsm_state42) & (exitcond8_fu_965_p2 == 1'd1))) begin
        currentSolution_address0 = tmp_18_reg_1724;
    end else if (((1'b1 == ap_CS_fsm_state42) & (exitcond8_fu_965_p2 == 1'd0))) begin
        currentSolution_address0 = tmp_22_fu_977_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        currentSolution_address0 = tmp_16_fu_825_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        currentSolution_address0 = tmp_s_fu_697_p1;
    end else begin
        currentSolution_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (~((output_stream_V_dest_V_1_ack_in == 1'b0) | (output_stream_V_id_V_1_ack_in == 1'b0) | (output_stream_V_last_V_1_ack_in == 1'b0) | (output_stream_V_user_V_1_ack_in == 1'b0) | (output_stream_V_strb_V_1_ack_in == 1'b0) | (output_stream_V_keep_V_1_ack_in == 1'b0) | (output_stream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state131)) | ((1'b1 == ap_CS_fsm_state42) & (exitcond8_fu_965_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state42) & (exitcond8_fu_965_p2 == 1'd0)))) begin
        currentSolution_ce0 = 1'b1;
    end else begin
        currentSolution_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state127)) begin
        currentSolution_d0 = tmp_30_fu_1332_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        currentSolution_d0 = tmp_15_cast_cast_fu_816_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        currentSolution_d0 = 32'd0;
    end else begin
        currentSolution_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state127) & (tmp_29_fu_1326_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state8) & (exitcond3_fu_708_p2 == 1'd0)))) begin
        currentSolution_we0 = 1'b1;
    end else begin
        currentSolution_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) & (tmp_21_fu_1093_p2 == 1'd0))) begin
        grp_fu_1098_ap_start = 1'b1;
    end else begin
        grp_fu_1098_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        grp_fu_1107_ap_start = 1'b1;
    end else begin
        grp_fu_1107_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_17_fu_835_p2 == 1'd1))) begin
        grp_fu_925_ap_start = 1'b1;
    end else begin
        grp_fu_925_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_609_p2 == 1'd0))) begin
        input_stream_TDATA_blk_n = input_stream_V_data_V_0_state[1'd0];
    end else begin
        input_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((input_stream_V_data_V_0_vld_out == 1'b0) & (exitcond2_fu_609_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_609_p2 == 1'd0))) begin
        input_stream_V_data_V_0_ack_out = 1'b1;
    end else begin
        input_stream_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_stream_V_data_V_0_sel == 1'b1)) begin
        input_stream_V_data_V_0_data_out = input_stream_V_data_V_0_payload_B;
    end else begin
        input_stream_V_data_V_0_data_out = input_stream_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((input_stream_V_data_V_0_vld_out == 1'b0) & (exitcond2_fu_609_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_609_p2 == 1'd0))) begin
        input_stream_V_dest_V_0_ack_out = 1'b1;
    end else begin
        input_stream_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_stream_V_dest_V_0_sel == 1'b1)) begin
        input_stream_V_dest_V_0_data_out = input_stream_V_dest_V_0_payload_B;
    end else begin
        input_stream_V_dest_V_0_data_out = input_stream_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((input_stream_V_data_V_0_vld_out == 1'b0) & (exitcond2_fu_609_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_609_p2 == 1'd0))) begin
        input_stream_V_id_V_0_ack_out = 1'b1;
    end else begin
        input_stream_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_stream_V_id_V_0_sel == 1'b1)) begin
        input_stream_V_id_V_0_data_out = input_stream_V_id_V_0_payload_B;
    end else begin
        input_stream_V_id_V_0_data_out = input_stream_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((input_stream_V_data_V_0_vld_out == 1'b0) & (exitcond2_fu_609_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_609_p2 == 1'd0))) begin
        input_stream_V_keep_V_0_ack_out = 1'b1;
    end else begin
        input_stream_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_stream_V_keep_V_0_sel == 1'b1)) begin
        input_stream_V_keep_V_0_data_out = input_stream_V_keep_V_0_payload_B;
    end else begin
        input_stream_V_keep_V_0_data_out = input_stream_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((input_stream_V_data_V_0_vld_out == 1'b0) & (exitcond2_fu_609_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_609_p2 == 1'd0))) begin
        input_stream_V_strb_V_0_ack_out = 1'b1;
    end else begin
        input_stream_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_stream_V_strb_V_0_sel == 1'b1)) begin
        input_stream_V_strb_V_0_data_out = input_stream_V_strb_V_0_payload_B;
    end else begin
        input_stream_V_strb_V_0_data_out = input_stream_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((input_stream_V_data_V_0_vld_out == 1'b0) & (exitcond2_fu_609_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_609_p2 == 1'd0))) begin
        input_stream_V_user_V_0_ack_out = 1'b1;
    end else begin
        input_stream_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_stream_V_user_V_0_sel == 1'b1)) begin
        input_stream_V_user_V_0_data_out = input_stream_V_user_V_0_payload_B;
    end else begin
        input_stream_V_user_V_0_data_out = input_stream_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        matrix_address0 = tmp_68_cast_fu_991_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        matrix_address0 = tmp_64_cast_fu_683_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        matrix_address0 = tmp_27_cast_fu_550_p1;
    end else begin
        matrix_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state3))) begin
        matrix_ce0 = 1'b1;
    end else begin
        matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        matrix_d0 = tmp_12_cast_cast_fu_687_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        matrix_d0 = 20'd0;
    end else begin
        matrix_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        matrix_we0 = 1'b1;
    end else begin
        matrix_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state135) | (1'b1 == ap_CS_fsm_state134))) begin
        output_stream_TDATA_blk_n = output_stream_V_data_V_1_state[1'd1];
    end else begin
        output_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((output_stream_V_data_V_1_sel == 1'b1)) begin
        output_stream_V_data_V_1_data_out = output_stream_V_data_V_1_payload_B;
    end else begin
        output_stream_V_data_V_1_data_out = output_stream_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((output_stream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state134))) begin
        output_stream_V_data_V_1_vld_in = 1'b1;
    end else begin
        output_stream_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((output_stream_V_dest_V_1_sel == 1'b1)) begin
        output_stream_V_dest_V_1_data_out = output_stream_V_dest_V_1_payload_B;
    end else begin
        output_stream_V_dest_V_1_data_out = output_stream_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if (((output_stream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state134))) begin
        output_stream_V_dest_V_1_vld_in = 1'b1;
    end else begin
        output_stream_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((output_stream_V_id_V_1_sel == 1'b1)) begin
        output_stream_V_id_V_1_data_out = output_stream_V_id_V_1_payload_B;
    end else begin
        output_stream_V_id_V_1_data_out = output_stream_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if (((output_stream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state134))) begin
        output_stream_V_id_V_1_vld_in = 1'b1;
    end else begin
        output_stream_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((output_stream_V_keep_V_1_sel == 1'b1)) begin
        output_stream_V_keep_V_1_data_out = output_stream_V_keep_V_1_payload_B;
    end else begin
        output_stream_V_keep_V_1_data_out = output_stream_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((output_stream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state134))) begin
        output_stream_V_keep_V_1_vld_in = 1'b1;
    end else begin
        output_stream_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((output_stream_V_last_V_1_sel == 1'b1)) begin
        output_stream_V_last_V_1_data_out = output_stream_V_last_V_1_payload_B;
    end else begin
        output_stream_V_last_V_1_data_out = output_stream_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((output_stream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state134))) begin
        output_stream_V_last_V_1_vld_in = 1'b1;
    end else begin
        output_stream_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((output_stream_V_strb_V_1_sel == 1'b1)) begin
        output_stream_V_strb_V_1_data_out = output_stream_V_strb_V_1_payload_B;
    end else begin
        output_stream_V_strb_V_1_data_out = output_stream_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if (((output_stream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state134))) begin
        output_stream_V_strb_V_1_vld_in = 1'b1;
    end else begin
        output_stream_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((output_stream_V_user_V_1_sel == 1'b1)) begin
        output_stream_V_user_V_1_data_out = output_stream_V_user_V_1_payload_B;
    end else begin
        output_stream_V_user_V_1_data_out = output_stream_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((output_stream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state134))) begin
        output_stream_V_user_V_1_vld_in = 1'b1;
    end else begin
        output_stream_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (tmp_3_fu_561_p2 == 1'd1) & (tmp_2_fu_555_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_555_p2 == 1'd1) & (tmp_3_fu_561_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_567_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((input_stream_V_data_V_0_vld_out == 1'b0) & (exitcond2_fu_609_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_609_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~((input_stream_V_data_V_0_vld_out == 1'b0) & (exitcond2_fu_609_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_609_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (tmp_4_fu_702_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (exitcond3_fu_708_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (tmp_17_fu_835_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state130;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            if (((1'b1 == ap_CS_fsm_state42) & (exitcond8_fu_965_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            if (((1'b1 == ap_CS_fsm_state50) & (tmp_21_fu_1093_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state125;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            if (((1'b1 == ap_CS_fsm_state127) & (tmp_73_fu_1349_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state130;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state128;
            end
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            if (((1'b1 == ap_CS_fsm_state130) & ((tmp_17_reg_1691 == 1'd0) | ((or_cond_fu_1454_p2 == 1'd1) | (tmp_37_fu_1437_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state131;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state131 : begin
            if ((~((output_stream_V_dest_V_1_ack_in == 1'b0) | (output_stream_V_id_V_1_ack_in == 1'b0) | (output_stream_V_last_V_1_ack_in == 1'b0) | (output_stream_V_user_V_1_ack_in == 1'b0) | (output_stream_V_strb_V_1_ack_in == 1'b0) | (output_stream_V_keep_V_1_ack_in == 1'b0) | (output_stream_V_data_V_1_ack_in == 1'b0)) & (output_stream_V_dest_V_1_state[1'd0] == 1'b0) & (output_stream_V_id_V_1_state[1'd0] == 1'b0) & (output_stream_V_last_V_1_state[1'd0] == 1'b0) & (output_stream_V_user_V_1_state[1'd0] == 1'b0) & (output_stream_V_strb_V_1_state[1'd0] == 1'b0) & (output_stream_V_keep_V_1_state[1'd0] == 1'b0) & (output_stream_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state131) & (exitcond_fu_1466_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((output_stream_V_dest_V_1_ack_in == 1'b0) | (output_stream_V_id_V_1_ack_in == 1'b0) | (output_stream_V_last_V_1_ack_in == 1'b0) | (output_stream_V_user_V_1_ack_in == 1'b0) | (output_stream_V_strb_V_1_ack_in == 1'b0) | (output_stream_V_keep_V_1_ack_in == 1'b0) | (output_stream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state131) & (exitcond_fu_1466_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state132;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state131;
            end
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            if (((output_stream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state134))) begin
                ap_NS_fsm = ap_ST_fsm_state135;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state134;
            end
        end
        ap_ST_fsm_state135 : begin
            if (((output_stream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state135))) begin
                ap_NS_fsm = ap_ST_fsm_state131;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state135;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state121 = ap_CS_fsm[32'd120];

assign ap_CS_fsm_state122 = ap_CS_fsm[32'd121];

assign ap_CS_fsm_state123 = ap_CS_fsm[32'd122];

assign ap_CS_fsm_state124 = ap_CS_fsm[32'd123];

assign ap_CS_fsm_state125 = ap_CS_fsm[32'd124];

assign ap_CS_fsm_state126 = ap_CS_fsm[32'd125];

assign ap_CS_fsm_state127 = ap_CS_fsm[32'd126];

assign ap_CS_fsm_state128 = ap_CS_fsm[32'd127];

assign ap_CS_fsm_state129 = ap_CS_fsm[32'd128];

assign ap_CS_fsm_state130 = ap_CS_fsm[32'd129];

assign ap_CS_fsm_state131 = ap_CS_fsm[32'd130];

assign ap_CS_fsm_state132 = ap_CS_fsm[32'd131];

assign ap_CS_fsm_state133 = ap_CS_fsm[32'd132];

assign ap_CS_fsm_state134 = ap_CS_fsm[32'd133];

assign ap_CS_fsm_state135 = ap_CS_fsm[32'd134];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state131 = ((output_stream_V_dest_V_1_ack_in == 1'b0) | (output_stream_V_id_V_1_ack_in == 1'b0) | (output_stream_V_last_V_1_ack_in == 1'b0) | (output_stream_V_user_V_1_ack_in == 1'b0) | (output_stream_V_strb_V_1_ack_in == 1'b0) | (output_stream_V_keep_V_1_ack_in == 1'b0) | (output_stream_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state5 = ((input_stream_V_data_V_0_vld_out == 1'b0) & (exitcond2_fu_609_p2 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_567_p2 = ((t_V_reg_366 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond2_fu_609_p2 = ((t_V_1_reg_377 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond3_fu_708_p2 = ((p_s_reg_399 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond8_fu_965_p2 = ((p_6_reg_433 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond_fu_1466_p2 = ((t_V_2_reg_467 == 3'd6) ? 1'b1 : 1'b0);

assign fpga_output_V_fu_1572_p3 = ((tmp_80_reg_1931[0:0] === 1'b1) ? neg_ti3_fu_1562_p2 : tmp_84_fu_1568_p1);

assign grp_fu_1098_p1 = 32'd1000;

assign grp_fu_1107_p0 = (deltaEnergy_reg_1811 - tmp_20_reg_1799);

assign grp_fu_482_p4 = {{lfsr_V[29:17]}};

assign grp_fu_925_p0 = {{grp_fu_482_p4}, {tmp_47_fu_911_p2}};

assign grp_fu_925_p1 = 29'd6;

assign i_V_1_fu_714_p2 = (p_s_reg_399 + 3'd1);

assign i_V_2_fu_1472_p2 = (t_V_2_reg_467 + 3'd1);

assign i_V_fu_573_p2 = (t_V_reg_366 + 3'd1);

assign indvarinc1_fu_535_p2 = (invdar1_reg_355 + 3'd1);

assign indvarinc2_fu_691_p2 = (invdar2_reg_388 + 3'd1);

assign indvarinc_fu_499_p2 = (invdar_reg_343 + 3'd1);

assign input_stream_TREADY = input_stream_V_dest_V_0_state[1'd1];

assign input_stream_V_data_V_0_ack_in = input_stream_V_data_V_0_state[1'd1];

assign input_stream_V_data_V_0_load_A = (input_stream_V_data_V_0_state_cmp_full & ~input_stream_V_data_V_0_sel_wr);

assign input_stream_V_data_V_0_load_B = (input_stream_V_data_V_0_state_cmp_full & input_stream_V_data_V_0_sel_wr);

assign input_stream_V_data_V_0_sel = input_stream_V_data_V_0_sel_rd;

assign input_stream_V_data_V_0_state_cmp_full = ((input_stream_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_stream_V_data_V_0_vld_in = input_stream_TVALID;

assign input_stream_V_data_V_0_vld_out = input_stream_V_data_V_0_state[1'd0];

assign input_stream_V_dest_V_0_ack_in = input_stream_V_dest_V_0_state[1'd1];

assign input_stream_V_dest_V_0_load_A = (input_stream_V_dest_V_0_state_cmp_full & ~input_stream_V_dest_V_0_sel_wr);

assign input_stream_V_dest_V_0_load_B = (input_stream_V_dest_V_0_state_cmp_full & input_stream_V_dest_V_0_sel_wr);

assign input_stream_V_dest_V_0_sel = input_stream_V_dest_V_0_sel_rd;

assign input_stream_V_dest_V_0_state_cmp_full = ((input_stream_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_stream_V_dest_V_0_vld_in = input_stream_TVALID;

assign input_stream_V_dest_V_0_vld_out = input_stream_V_dest_V_0_state[1'd0];

assign input_stream_V_id_V_0_ack_in = input_stream_V_id_V_0_state[1'd1];

assign input_stream_V_id_V_0_load_A = (input_stream_V_id_V_0_state_cmp_full & ~input_stream_V_id_V_0_sel_wr);

assign input_stream_V_id_V_0_load_B = (input_stream_V_id_V_0_state_cmp_full & input_stream_V_id_V_0_sel_wr);

assign input_stream_V_id_V_0_sel = input_stream_V_id_V_0_sel_rd;

assign input_stream_V_id_V_0_state_cmp_full = ((input_stream_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_stream_V_id_V_0_vld_in = input_stream_TVALID;

assign input_stream_V_id_V_0_vld_out = input_stream_V_id_V_0_state[1'd0];

assign input_stream_V_keep_V_0_ack_in = input_stream_V_keep_V_0_state[1'd1];

assign input_stream_V_keep_V_0_load_A = (input_stream_V_keep_V_0_state_cmp_full & ~input_stream_V_keep_V_0_sel_wr);

assign input_stream_V_keep_V_0_load_B = (input_stream_V_keep_V_0_state_cmp_full & input_stream_V_keep_V_0_sel_wr);

assign input_stream_V_keep_V_0_sel = input_stream_V_keep_V_0_sel_rd;

assign input_stream_V_keep_V_0_state_cmp_full = ((input_stream_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_stream_V_keep_V_0_vld_in = input_stream_TVALID;

assign input_stream_V_keep_V_0_vld_out = input_stream_V_keep_V_0_state[1'd0];

assign input_stream_V_strb_V_0_ack_in = input_stream_V_strb_V_0_state[1'd1];

assign input_stream_V_strb_V_0_load_A = (input_stream_V_strb_V_0_state_cmp_full & ~input_stream_V_strb_V_0_sel_wr);

assign input_stream_V_strb_V_0_load_B = (input_stream_V_strb_V_0_state_cmp_full & input_stream_V_strb_V_0_sel_wr);

assign input_stream_V_strb_V_0_sel = input_stream_V_strb_V_0_sel_rd;

assign input_stream_V_strb_V_0_state_cmp_full = ((input_stream_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_stream_V_strb_V_0_vld_in = input_stream_TVALID;

assign input_stream_V_strb_V_0_vld_out = input_stream_V_strb_V_0_state[1'd0];

assign input_stream_V_user_V_0_ack_in = input_stream_V_user_V_0_state[1'd1];

assign input_stream_V_user_V_0_load_A = (input_stream_V_user_V_0_state_cmp_full & ~input_stream_V_user_V_0_sel_wr);

assign input_stream_V_user_V_0_load_B = (input_stream_V_user_V_0_state_cmp_full & input_stream_V_user_V_0_sel_wr);

assign input_stream_V_user_V_0_sel = input_stream_V_user_V_0_sel_rd;

assign input_stream_V_user_V_0_state_cmp_full = ((input_stream_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_stream_V_user_V_0_vld_in = input_stream_TVALID;

assign input_stream_V_user_V_0_vld_out = input_stream_V_user_V_0_state[1'd0];

assign iterate_V_fu_841_p2 = (p_4_reg_410 + 18'd1);

assign j_V_1_fu_971_p2 = (p_6_reg_433 + 3'd1);

assign j_V_fu_615_p2 = (t_V_1_reg_377 + 3'd1);

assign localFieldVal_1_fu_1072_p2 = (tmp_62_fu_1065_p3 + localFieldVal_reg_444);

assign mul1_fu_1307_p0 = mul1_fu_1307_p00;

assign mul1_fu_1307_p00 = ret_V_reg_1865;

assign mul1_fu_1307_p2 = (mul1_fu_1307_p0 * $signed(76'h4000800101));

assign mul2_fu_1343_p0 = mul2_fu_1343_p00;

assign mul2_fu_1343_p00 = phi_mul_reg_421;

assign mul2_fu_1343_p2 = (mul2_fu_1343_p0 * $signed('h10C6F7A1));

assign mul3_fu_1374_p0 = tmp_35_reg_1881;

assign mul3_fu_1374_p2 = ($signed(mul3_fu_1374_p0) * $signed(65'h14F8B588F));

assign mul4_fu_1501_p1 = reg_495;

assign mul4_fu_1501_p2 = ($signed({{1'b0}, {65'd4398046512}}) * $signed(mul4_fu_1501_p1));

assign mul7_fu_1128_p0 = tmp_i2_reg_1833;

assign mul7_fu_1128_p2 = ($signed(mul7_fu_1128_p0) * $signed(65'h10624DD30));

assign mul_fu_1016_p0 = tmp_23_reg_1762;

assign mul_fu_1016_p2 = ($signed(mul_fu_1016_p0) * $signed(65'h10624DD30));

assign neg_mul1_fu_1390_p2 = (65'd0 - mul3_reg_1892);

assign neg_mul2_fu_1537_p2 = (65'd0 - mul4_reg_1937);

assign neg_mul8_fu_1144_p2 = (65'd0 - mul7_reg_1844);

assign neg_mul_fu_1032_p2 = (65'd0 - mul_reg_1773);

assign neg_ti1_fu_1165_p2 = (22'd0 - p_v2_v_fu_1159_p3);

assign neg_ti2_fu_1419_p2 = (32'd0 - tmp_79_fu_1412_p3);

assign neg_ti3_fu_1562_p2 = (8'd0 - tmp_83_fu_1558_p1);

assign neg_ti_fu_1056_p2 = ($signed(25'd0) - $signed(trunc_fu_1053_p1));

assign or_cond_fu_1454_p2 = (tmp_39_fu_1449_p2 & tmp_38_fu_1443_p2);

assign output_last_V_fu_1483_p2 = ((t_V_2_reg_467 == 3'd5) ? 1'b1 : 1'b0);

assign output_stream_TDATA = output_stream_V_data_V_1_data_out;

assign output_stream_TDEST = output_stream_V_dest_V_1_data_out;

assign output_stream_TID = output_stream_V_id_V_1_data_out;

assign output_stream_TKEEP = output_stream_V_keep_V_1_data_out;

assign output_stream_TLAST = output_stream_V_last_V_1_data_out;

assign output_stream_TSTRB = output_stream_V_strb_V_1_data_out;

assign output_stream_TUSER = output_stream_V_user_V_1_data_out;

assign output_stream_TVALID = output_stream_V_dest_V_1_state[1'd0];

assign output_stream_V_data_V_1_ack_in = output_stream_V_data_V_1_state[1'd1];

assign output_stream_V_data_V_1_ack_out = output_stream_TREADY;

assign output_stream_V_data_V_1_load_A = (output_stream_V_data_V_1_state_cmp_full & ~output_stream_V_data_V_1_sel_wr);

assign output_stream_V_data_V_1_load_B = (output_stream_V_data_V_1_state_cmp_full & output_stream_V_data_V_1_sel_wr);

assign output_stream_V_data_V_1_sel = output_stream_V_data_V_1_sel_rd;

assign output_stream_V_data_V_1_state_cmp_full = ((output_stream_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_stream_V_data_V_1_vld_out = output_stream_V_data_V_1_state[1'd0];

assign output_stream_V_dest_V_1_ack_in = output_stream_V_dest_V_1_state[1'd1];

assign output_stream_V_dest_V_1_ack_out = output_stream_TREADY;

assign output_stream_V_dest_V_1_load_A = (output_stream_V_dest_V_1_state_cmp_full & ~output_stream_V_dest_V_1_sel_wr);

assign output_stream_V_dest_V_1_load_B = (output_stream_V_dest_V_1_state_cmp_full & output_stream_V_dest_V_1_sel_wr);

assign output_stream_V_dest_V_1_sel = output_stream_V_dest_V_1_sel_rd;

assign output_stream_V_dest_V_1_state_cmp_full = ((output_stream_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_stream_V_dest_V_1_vld_out = output_stream_V_dest_V_1_state[1'd0];

assign output_stream_V_id_V_1_ack_in = output_stream_V_id_V_1_state[1'd1];

assign output_stream_V_id_V_1_ack_out = output_stream_TREADY;

assign output_stream_V_id_V_1_load_A = (output_stream_V_id_V_1_state_cmp_full & ~output_stream_V_id_V_1_sel_wr);

assign output_stream_V_id_V_1_load_B = (output_stream_V_id_V_1_state_cmp_full & output_stream_V_id_V_1_sel_wr);

assign output_stream_V_id_V_1_sel = output_stream_V_id_V_1_sel_rd;

assign output_stream_V_id_V_1_state_cmp_full = ((output_stream_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_stream_V_id_V_1_vld_out = output_stream_V_id_V_1_state[1'd0];

assign output_stream_V_keep_V_1_ack_in = output_stream_V_keep_V_1_state[1'd1];

assign output_stream_V_keep_V_1_ack_out = output_stream_TREADY;

assign output_stream_V_keep_V_1_load_A = (output_stream_V_keep_V_1_state_cmp_full & ~output_stream_V_keep_V_1_sel_wr);

assign output_stream_V_keep_V_1_load_B = (output_stream_V_keep_V_1_state_cmp_full & output_stream_V_keep_V_1_sel_wr);

assign output_stream_V_keep_V_1_sel = output_stream_V_keep_V_1_sel_rd;

assign output_stream_V_keep_V_1_state_cmp_full = ((output_stream_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_stream_V_keep_V_1_vld_out = output_stream_V_keep_V_1_state[1'd0];

assign output_stream_V_last_V_1_ack_in = output_stream_V_last_V_1_state[1'd1];

assign output_stream_V_last_V_1_ack_out = output_stream_TREADY;

assign output_stream_V_last_V_1_load_A = (output_stream_V_last_V_1_state_cmp_full & ~output_stream_V_last_V_1_sel_wr);

assign output_stream_V_last_V_1_load_B = (output_stream_V_last_V_1_state_cmp_full & output_stream_V_last_V_1_sel_wr);

assign output_stream_V_last_V_1_sel = output_stream_V_last_V_1_sel_rd;

assign output_stream_V_last_V_1_state_cmp_full = ((output_stream_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_stream_V_last_V_1_vld_out = output_stream_V_last_V_1_state[1'd0];

assign output_stream_V_strb_V_1_ack_in = output_stream_V_strb_V_1_state[1'd1];

assign output_stream_V_strb_V_1_ack_out = output_stream_TREADY;

assign output_stream_V_strb_V_1_load_A = (output_stream_V_strb_V_1_state_cmp_full & ~output_stream_V_strb_V_1_sel_wr);

assign output_stream_V_strb_V_1_load_B = (output_stream_V_strb_V_1_state_cmp_full & output_stream_V_strb_V_1_sel_wr);

assign output_stream_V_strb_V_1_sel = output_stream_V_strb_V_1_sel_rd;

assign output_stream_V_strb_V_1_state_cmp_full = ((output_stream_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_stream_V_strb_V_1_vld_out = output_stream_V_strb_V_1_state[1'd0];

assign output_stream_V_user_V_1_ack_in = output_stream_V_user_V_1_state[1'd1];

assign output_stream_V_user_V_1_ack_out = output_stream_TREADY;

assign output_stream_V_user_V_1_load_A = (output_stream_V_user_V_1_state_cmp_full & ~output_stream_V_user_V_1_sel_wr);

assign output_stream_V_user_V_1_load_B = (output_stream_V_user_V_1_state_cmp_full & output_stream_V_user_V_1_sel_wr);

assign output_stream_V_user_V_1_sel = output_stream_V_user_V_1_sel_rd;

assign output_stream_V_user_V_1_state_cmp_full = ((output_stream_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_stream_V_user_V_1_vld_out = output_stream_V_user_V_1_state[1'd0];

assign p_shl1_cast_fu_525_p1 = tmp_9_fu_517_p3;

assign p_shl2_cast_fu_587_p1 = tmp_6_fu_579_p3;

assign p_shl3_cast_fu_599_p1 = tmp_7_fu_591_p3;

assign p_shl4_cast_fu_939_p3 = {{tmp_49_fu_935_p1}, {3'd0}};

assign p_shl5_cast_fu_951_p3 = {{tmp_50_fu_947_p1}, {1'd0}};

assign p_shl_cast_fu_513_p1 = tmp_fu_505_p3;

assign p_v1_v_fu_1047_p3 = ((tmp_53_reg_1767[0:0] === 1'b1) ? tmp_54_fu_1037_p4 : tmp_55_reg_1778);

assign p_v2_v_fu_1159_p3 = ((tmp_63_reg_1838[0:0] === 1'b1) ? tmp_64_fu_1149_p4 : tmp_65_reg_1849);

assign p_v_v_fu_1552_p3 = ((tmp_80_reg_1931[0:0] === 1'b1) ? tmp_81_fu_1542_p4 : tmp_82_reg_1942);

assign phitmp_fu_1460_p2 = (phi_mul_reg_421 + 28'd1000);

assign r_V_1_fu_774_p3 = {{ret_V2_i_fu_768_p2}, {15'd0}};

assign r_V_3_fu_893_p3 = {{ret_V2_i2_fu_887_p2}, {15'd0}};

assign r_V_4_fu_1229_p3 = {{ret_V2_i4_fu_1223_p2}, {15'd0}};

assign ret_V2_i2_fu_887_p2 = (tmp_45_fu_881_p2 ^ tmp_44_fu_875_p2);

assign ret_V2_i4_fu_1223_p2 = (tmp_58_fu_1218_p2 ^ tmp_57_fu_1212_p2);

assign ret_V2_i_fu_768_p2 = (tmp_27_fu_762_p2 ^ tmp_26_fu_756_p2);

assign ret_V_1_cast_fu_806_p1 = ret_V_1_fu_798_p3;

assign ret_V_1_fu_798_p3 = {{grp_fu_482_p4}, {tmp_32_fu_792_p2}};

assign ret_V_4_fu_1276_p3 = {{tmp_61_fu_1267_p4}, {tmp_60_fu_1261_p2}};

assign ret_V_5_cast_fu_1284_p1 = ret_V_4_fu_1276_p3;

assign ret_V_fu_1298_p0 = ret_V_fu_1298_p00;

assign ret_V_fu_1298_p00 = ret_V_4_fu_1276_p3;

assign ret_V_fu_1298_p2 = (ret_V_fu_1298_p0 * $signed('h3E8));

assign tmp5_cast_fu_1183_p1 = $signed(tmp5_reg_1855);

assign tmp5_fu_1177_p2 = (tmp_66_fu_1171_p3 + 22'd1000);

assign tmp_10_fu_1580_p1 = 19'd1000;

assign tmp_11_fu_653_p2 = (tmp_8_reg_1645 + tmp_12_cast_fu_649_p1);

assign tmp_12_cast_cast_fu_687_p1 = tmp_10_reg_1658;

assign tmp_12_cast_fu_649_p1 = t_V_1_reg_377;

assign tmp_12_fu_720_p3 = lfsr_V[32'd1];

assign tmp_13_fu_728_p1 = lfsr_V[0:0];

assign tmp_14_fu_732_p3 = lfsr_V[32'd5];

assign tmp_15_cast_cast_fu_816_p3 = ((tmp_12_fu_720_p3[0:0] === 1'b1) ? 32'd1000 : 32'd4294966296);

assign tmp_15_fu_740_p3 = lfsr_V[32'd2];

assign tmp_16_fu_825_p1 = p_s_reg_399;

assign tmp_17_fu_835_p2 = ((p_4_reg_410 < 18'd250000) ? 1'b1 : 1'b0);

assign tmp_18_fu_931_p1 = grp_fu_925_p2;

assign tmp_19_fu_1078_p2 = (25'd0 - localFieldVal_reg_444);

assign tmp_1_cast_fu_541_p1 = invdar1_reg_355;

assign tmp_1_fu_529_p2 = (p_shl_cast_fu_513_p1 - p_shl1_cast_fu_525_p1);

assign tmp_20_fu_1087_p1 = tmp_19_reg_1794;

assign tmp_20_fu_1087_p2 = ($signed(reg_495) * $signed(tmp_20_fu_1087_p1));

assign tmp_21_fu_1093_p2 = (($signed(tmp_20_reg_1799) < $signed(32'd1000)) ? 1'b1 : 1'b0);

assign tmp_22_cast_fu_982_p1 = p_6_reg_433;

assign tmp_22_fu_977_p1 = p_6_reg_433;

assign tmp_23_fu_999_p0 = matrix_load_reg_1757;

assign tmp_23_fu_999_p2 = ($signed(tmp_23_fu_999_p0) * $signed(reg_495));

assign tmp_24_fu_748_p3 = lfsr_V[32'd3];

assign tmp_26_fu_756_p2 = (tmp_14_fu_732_p3 ^ tmp_13_fu_728_p1);

assign tmp_27_cast_fu_550_p1 = $signed(tmp_5_fu_545_p2);

assign tmp_27_fu_762_p2 = (tmp_24_fu_748_p3 ^ tmp_15_fu_740_p3);

assign tmp_28_fu_1322_p1 = tmp_72_fu_1313_p4;

assign tmp_29_fu_1326_p2 = (($signed(tmp_28_fu_1322_p1) > $signed(prob_reg_456)) ? 1'b1 : 1'b0);

assign tmp_2_fu_555_p2 = ((invdar1_reg_355 == 3'd5) ? 1'b1 : 1'b0);

assign tmp_30_fu_1332_p2 = ($signed(32'd0) - $signed(reg_495));

assign tmp_31_fu_782_p4 = {{lfsr_V[16:1]}};

assign tmp_32_fu_792_p2 = (tmp_31_fu_782_p4 | r_V_1_fu_774_p3);

assign tmp_34_fu_847_p1 = lfsr_V[0:0];

assign tmp_35_fu_1357_p0 = temperature_fu_228;

assign tmp_35_fu_1357_p2 = ($signed(tmp_35_fu_1357_p0) * $signed('h1869F));

assign tmp_36_fu_1425_p3 = ((tmp_74_reg_1886[0:0] === 1'b1) ? neg_ti2_fu_1419_p2 : tmp_78_fu_1409_p1);

assign tmp_37_fu_1437_p2 = ((temperature_fu_228 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_38_fu_1443_p2 = (($signed(temperature_fu_228) < $signed(32'd11)) ? 1'b1 : 1'b0);

assign tmp_39_fu_1449_p2 = (($signed(tmp_20_reg_1799) < $signed(32'd101000)) ? 1'b1 : 1'b0);

assign tmp_3_fu_561_p2 = ((invdar_reg_343 == 3'd5) ? 1'b1 : 1'b0);

assign tmp_40_fu_1478_p1 = t_V_2_reg_467;

assign tmp_41_fu_851_p3 = lfsr_V[32'd5];

assign tmp_42_fu_859_p3 = lfsr_V[32'd2];

assign tmp_43_fu_867_p3 = lfsr_V[32'd3];

assign tmp_44_fu_875_p2 = (tmp_41_fu_851_p3 ^ tmp_34_fu_847_p1);

assign tmp_44_i_fu_1186_p2 = ($signed(x_assign_reg_1826) + $signed(tmp5_cast_fu_1183_p1));

assign tmp_45_fu_881_p2 = (tmp_43_fu_867_p3 ^ tmp_42_fu_859_p3);

assign tmp_46_fu_901_p4 = {{lfsr_V[16:1]}};

assign tmp_47_fu_911_p2 = (tmp_46_fu_901_p4 | r_V_3_fu_893_p3);

assign tmp_49_fu_935_p1 = grp_fu_925_p2[3:0];

assign tmp_4_fu_702_p2 = ((invdar2_reg_388 == 3'd5) ? 1'b1 : 1'b0);

assign tmp_50_fu_947_p1 = grp_fu_925_p2[5:0];

assign tmp_51_fu_959_p2 = (p_shl4_cast_fu_939_p3 - p_shl5_cast_fu_951_p3);

assign tmp_52_fu_986_p2 = (tmp_22_cast_fu_982_p1 + tmp_51_reg_1729);

assign tmp_54_fu_1037_p4 = {{neg_mul_fu_1032_p2[64:42]}};

assign tmp_56_fu_1062_p1 = p_v1_v_reg_1783;

assign tmp_57_fu_1212_p2 = (tmp_68_fu_1198_p3 ^ tmp_67_fu_1191_p3);

assign tmp_58_fu_1218_p2 = (tmp_69_fu_1205_p3 ^ tmp_43_reg_1709);

assign tmp_59_fu_1253_p3 = {{tmp_71_fu_1246_p3}, {tmp_70_fu_1237_p4}};

assign tmp_5_fu_545_p2 = (tmp_1_reg_1591 + tmp_1_cast_fu_541_p1);

assign tmp_60_fu_1261_p2 = (tmp_59_fu_1253_p3 | r_V_4_fu_1229_p3);

assign tmp_61_fu_1267_p4 = {{r_V_2_reg_1700[29:18]}};

assign tmp_62_fu_1065_p3 = ((tmp_53_reg_1767[0:0] === 1'b1) ? neg_ti_fu_1056_p2 : tmp_56_fu_1062_p1);

assign tmp_64_cast_fu_683_p1 = $signed(tmp_11_reg_1663);

assign tmp_64_fu_1149_p4 = {{neg_mul8_fu_1144_p2[64:43]}};

assign tmp_66_fu_1171_p3 = ((tmp_63_reg_1838[0:0] === 1'b1) ? neg_ti1_fu_1165_p2 : tmp_65_reg_1849);

assign tmp_67_fu_1191_p3 = r_V_2_reg_1700[32'd1];

assign tmp_68_cast_fu_991_p1 = $signed(tmp_52_fu_986_p2);

assign tmp_68_fu_1198_p3 = r_V_2_reg_1700[32'd6];

assign tmp_69_fu_1205_p3 = r_V_2_reg_1700[32'd4];

assign tmp_6_fu_579_p3 = {{t_V_reg_366}, {3'd0}};

assign tmp_70_fu_1237_p4 = {{tmp_47_reg_1714[15:1]}};

assign tmp_71_fu_1246_p3 = r_V_2_reg_1700[32'd17];

assign tmp_72_fu_1313_p4 = {{mul1_reg_1870[75:53]}};

assign tmp_73_fu_1349_p3 = mul2_fu_1343_p2[32'd46];

assign tmp_75_fu_1395_p4 = {{neg_mul1_fu_1390_p2[64:49]}};

assign tmp_76_fu_1405_p1 = $signed(tmp_75_fu_1395_p4);

assign tmp_78_fu_1409_p1 = $signed(tmp_77_reg_1897);

assign tmp_79_fu_1412_p3 = ((tmp_74_reg_1886[0:0] === 1'b1) ? tmp_76_fu_1405_p1 : tmp_78_fu_1409_p1);

assign tmp_7_fu_591_p3 = {{t_V_reg_366}, {1'd0}};

assign tmp_80_fu_1489_p1 = currentSolution_q0;

assign tmp_81_fu_1542_p4 = {{neg_mul2_fu_1537_p2[64:42]}};

assign tmp_83_fu_1558_p1 = p_v_v_fu_1552_p3[7:0];

assign tmp_84_fu_1568_p1 = p_v_v_fu_1552_p3[7:0];

assign tmp_8_fu_603_p2 = (p_shl2_cast_fu_587_p1 - p_shl3_cast_fu_599_p1);

assign tmp_9_fu_517_p3 = {{invdar_reg_343}, {1'd0}};

assign tmp_fu_505_p3 = {{invdar_reg_343}, {3'd0}};

assign tmp_i2_fu_1113_p2 = ($signed(x_assign_reg_1826) * $signed(x_assign_reg_1826));

assign tmp_s_fu_697_p1 = invdar2_reg_388;

assign trunc_fu_1053_p1 = p_v1_v_reg_1783;

always @ (posedge ap_clk) begin
    lfsr_V[31:16] <= 16'b0000000000000000;
    tmp_1_reg_1591[0] <= 1'b0;
    tmp_8_reg_1645[0] <= 1'b0;
    r_V_2_reg_1700[31:16] <= 16'b0000000000000000;
    tmp_18_reg_1724[63:29] <= 35'b00000000000000000000000000000000000;
    tmp_51_reg_1729[0] <= 1'b0;
    mul_reg_1773[3:0] <= 4'b0000;
    mul7_reg_1844[3:0] <= 4'b0000;
    ret_V_reg_1865[2:0] <= 3'b000;
    mul1_reg_1870[2:0] <= 3'b000;
end

endmodule //maxCut
