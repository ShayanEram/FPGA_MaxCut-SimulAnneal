-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity maxCut is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    input_stream_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    input_stream_TVALID : IN STD_LOGIC;
    input_stream_TREADY : OUT STD_LOGIC;
    input_stream_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    input_stream_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    input_stream_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    input_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_stream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    input_stream_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    output_stream_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_stream_TVALID : OUT STD_LOGIC;
    output_stream_TREADY : IN STD_LOGIC;
    output_stream_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_stream_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_stream_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    output_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_stream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_stream_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of maxCut is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "maxCut,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.702063,HLS_SYN_LAT=162743,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=32,HLS_SYN_FF=2651,HLS_SYN_LUT=3850,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (124 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (124 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (124 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (124 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (124 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (124 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (124 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (124 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (124 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (124 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (124 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (124 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111011";
    constant ap_const_lv32_7C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_79 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_75 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110101";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv14_4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv14_2710 : STD_LOGIC_VECTOR (13 downto 0) := "10011100010000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_30D40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000110000110101000000";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2710 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010011100010000";
    constant ap_const_lv32_FFFFD8F0 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111101100011110000";
    constant ap_const_lv12_9C4 : STD_LOGIC_VECTOR (11 downto 0) := "100111000100";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv65_1A36E2EB2 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000110100011011011100010111010110010";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv47_2711 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000010011100010001";
    constant ap_const_lv47_7FFFFFFFD8EF : STD_LOGIC_VECTOR (46 downto 0) := "11111111111111111111111111111111101100011101111";
    constant ap_const_lv47_19999999A : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000110011001100110011001100110011010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv47_0 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7FFF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000111111111111111";
    constant ap_const_lv50_1A36E2F : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000001101000110110111000101111";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_1869F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000011000011010011111";
    constant ap_const_lv65_14F8B588F : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000101001111100010110101100010001111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_FF674270 : STD_LOGIC_VECTOR (31 downto 0) := "11111111011001110100001001110000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv23_2710 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010011100010000";
    constant ap_const_lv24_3E8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001111101000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (124 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_stream_V_data_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal input_stream_V_data_V_0_vld_in : STD_LOGIC;
    signal input_stream_V_data_V_0_vld_out : STD_LOGIC;
    signal input_stream_V_data_V_0_ack_in : STD_LOGIC;
    signal input_stream_V_data_V_0_ack_out : STD_LOGIC;
    signal input_stream_V_data_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal input_stream_V_data_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal input_stream_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal input_stream_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal input_stream_V_data_V_0_sel : STD_LOGIC;
    signal input_stream_V_data_V_0_load_A : STD_LOGIC;
    signal input_stream_V_data_V_0_load_B : STD_LOGIC;
    signal input_stream_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_stream_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal input_stream_V_keep_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal input_stream_V_keep_V_0_vld_in : STD_LOGIC;
    signal input_stream_V_keep_V_0_vld_out : STD_LOGIC;
    signal input_stream_V_keep_V_0_ack_in : STD_LOGIC;
    signal input_stream_V_keep_V_0_ack_out : STD_LOGIC;
    signal input_stream_V_keep_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal input_stream_V_keep_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal input_stream_V_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal input_stream_V_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal input_stream_V_keep_V_0_sel : STD_LOGIC;
    signal input_stream_V_keep_V_0_load_A : STD_LOGIC;
    signal input_stream_V_keep_V_0_load_B : STD_LOGIC;
    signal input_stream_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_stream_V_keep_V_0_state_cmp_full : STD_LOGIC;
    signal input_stream_V_strb_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal input_stream_V_strb_V_0_vld_in : STD_LOGIC;
    signal input_stream_V_strb_V_0_vld_out : STD_LOGIC;
    signal input_stream_V_strb_V_0_ack_in : STD_LOGIC;
    signal input_stream_V_strb_V_0_ack_out : STD_LOGIC;
    signal input_stream_V_strb_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal input_stream_V_strb_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal input_stream_V_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal input_stream_V_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal input_stream_V_strb_V_0_sel : STD_LOGIC;
    signal input_stream_V_strb_V_0_load_A : STD_LOGIC;
    signal input_stream_V_strb_V_0_load_B : STD_LOGIC;
    signal input_stream_V_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_stream_V_strb_V_0_state_cmp_full : STD_LOGIC;
    signal input_stream_V_user_V_0_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal input_stream_V_user_V_0_vld_in : STD_LOGIC;
    signal input_stream_V_user_V_0_vld_out : STD_LOGIC;
    signal input_stream_V_user_V_0_ack_in : STD_LOGIC;
    signal input_stream_V_user_V_0_ack_out : STD_LOGIC;
    signal input_stream_V_user_V_0_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal input_stream_V_user_V_0_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal input_stream_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal input_stream_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal input_stream_V_user_V_0_sel : STD_LOGIC;
    signal input_stream_V_user_V_0_load_A : STD_LOGIC;
    signal input_stream_V_user_V_0_load_B : STD_LOGIC;
    signal input_stream_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_stream_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal input_stream_V_id_V_0_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal input_stream_V_id_V_0_vld_in : STD_LOGIC;
    signal input_stream_V_id_V_0_vld_out : STD_LOGIC;
    signal input_stream_V_id_V_0_ack_in : STD_LOGIC;
    signal input_stream_V_id_V_0_ack_out : STD_LOGIC;
    signal input_stream_V_id_V_0_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal input_stream_V_id_V_0_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal input_stream_V_id_V_0_sel_rd : STD_LOGIC := '0';
    signal input_stream_V_id_V_0_sel_wr : STD_LOGIC := '0';
    signal input_stream_V_id_V_0_sel : STD_LOGIC;
    signal input_stream_V_id_V_0_load_A : STD_LOGIC;
    signal input_stream_V_id_V_0_load_B : STD_LOGIC;
    signal input_stream_V_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_stream_V_id_V_0_state_cmp_full : STD_LOGIC;
    signal input_stream_V_dest_V_0_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal input_stream_V_dest_V_0_vld_in : STD_LOGIC;
    signal input_stream_V_dest_V_0_vld_out : STD_LOGIC;
    signal input_stream_V_dest_V_0_ack_in : STD_LOGIC;
    signal input_stream_V_dest_V_0_ack_out : STD_LOGIC;
    signal input_stream_V_dest_V_0_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal input_stream_V_dest_V_0_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal input_stream_V_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal input_stream_V_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal input_stream_V_dest_V_0_sel : STD_LOGIC;
    signal input_stream_V_dest_V_0_load_A : STD_LOGIC;
    signal input_stream_V_dest_V_0_load_B : STD_LOGIC;
    signal input_stream_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_stream_V_dest_V_0_state_cmp_full : STD_LOGIC;
    signal output_stream_V_data_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal output_stream_V_data_V_1_vld_in : STD_LOGIC;
    signal output_stream_V_data_V_1_vld_out : STD_LOGIC;
    signal output_stream_V_data_V_1_ack_in : STD_LOGIC;
    signal output_stream_V_data_V_1_ack_out : STD_LOGIC;
    signal output_stream_V_data_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal output_stream_V_data_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal output_stream_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal output_stream_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal output_stream_V_data_V_1_sel : STD_LOGIC;
    signal output_stream_V_data_V_1_load_A : STD_LOGIC;
    signal output_stream_V_data_V_1_load_B : STD_LOGIC;
    signal output_stream_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_stream_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal output_stream_V_keep_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal output_stream_V_keep_V_1_vld_in : STD_LOGIC;
    signal output_stream_V_keep_V_1_vld_out : STD_LOGIC;
    signal output_stream_V_keep_V_1_ack_in : STD_LOGIC;
    signal output_stream_V_keep_V_1_ack_out : STD_LOGIC;
    signal output_stream_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal output_stream_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal output_stream_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal output_stream_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal output_stream_V_keep_V_1_sel : STD_LOGIC;
    signal output_stream_V_keep_V_1_load_A : STD_LOGIC;
    signal output_stream_V_keep_V_1_load_B : STD_LOGIC;
    signal output_stream_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_stream_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal output_stream_V_strb_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal output_stream_V_strb_V_1_vld_in : STD_LOGIC;
    signal output_stream_V_strb_V_1_vld_out : STD_LOGIC;
    signal output_stream_V_strb_V_1_ack_in : STD_LOGIC;
    signal output_stream_V_strb_V_1_ack_out : STD_LOGIC;
    signal output_stream_V_strb_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal output_stream_V_strb_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal output_stream_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal output_stream_V_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal output_stream_V_strb_V_1_sel : STD_LOGIC;
    signal output_stream_V_strb_V_1_load_A : STD_LOGIC;
    signal output_stream_V_strb_V_1_load_B : STD_LOGIC;
    signal output_stream_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_stream_V_strb_V_1_state_cmp_full : STD_LOGIC;
    signal output_stream_V_user_V_1_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal output_stream_V_user_V_1_vld_in : STD_LOGIC;
    signal output_stream_V_user_V_1_vld_out : STD_LOGIC;
    signal output_stream_V_user_V_1_ack_in : STD_LOGIC;
    signal output_stream_V_user_V_1_ack_out : STD_LOGIC;
    signal output_stream_V_user_V_1_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal output_stream_V_user_V_1_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal output_stream_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal output_stream_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal output_stream_V_user_V_1_sel : STD_LOGIC;
    signal output_stream_V_user_V_1_load_A : STD_LOGIC;
    signal output_stream_V_user_V_1_load_B : STD_LOGIC;
    signal output_stream_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_stream_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal output_stream_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal output_stream_V_last_V_1_vld_in : STD_LOGIC;
    signal output_stream_V_last_V_1_vld_out : STD_LOGIC;
    signal output_stream_V_last_V_1_ack_in : STD_LOGIC;
    signal output_stream_V_last_V_1_ack_out : STD_LOGIC;
    signal output_stream_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal output_stream_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal output_stream_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal output_stream_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal output_stream_V_last_V_1_sel : STD_LOGIC;
    signal output_stream_V_last_V_1_load_A : STD_LOGIC;
    signal output_stream_V_last_V_1_load_B : STD_LOGIC;
    signal output_stream_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_stream_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal output_stream_V_id_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal output_stream_V_id_V_1_vld_in : STD_LOGIC;
    signal output_stream_V_id_V_1_vld_out : STD_LOGIC;
    signal output_stream_V_id_V_1_ack_in : STD_LOGIC;
    signal output_stream_V_id_V_1_ack_out : STD_LOGIC;
    signal output_stream_V_id_V_1_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal output_stream_V_id_V_1_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal output_stream_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal output_stream_V_id_V_1_sel_wr : STD_LOGIC := '0';
    signal output_stream_V_id_V_1_sel : STD_LOGIC;
    signal output_stream_V_id_V_1_load_A : STD_LOGIC;
    signal output_stream_V_id_V_1_load_B : STD_LOGIC;
    signal output_stream_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_stream_V_id_V_1_state_cmp_full : STD_LOGIC;
    signal output_stream_V_dest_V_1_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal output_stream_V_dest_V_1_vld_in : STD_LOGIC;
    signal output_stream_V_dest_V_1_vld_out : STD_LOGIC;
    signal output_stream_V_dest_V_1_ack_in : STD_LOGIC;
    signal output_stream_V_dest_V_1_ack_out : STD_LOGIC;
    signal output_stream_V_dest_V_1_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal output_stream_V_dest_V_1_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal output_stream_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal output_stream_V_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal output_stream_V_dest_V_1_sel : STD_LOGIC;
    signal output_stream_V_dest_V_1_load_A : STD_LOGIC;
    signal output_stream_V_dest_V_1_load_B : STD_LOGIC;
    signal output_stream_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_stream_V_dest_V_1_state_cmp_full : STD_LOGIC;
    signal reg_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001010110011101111";
    signal input_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond2_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state124 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state124 : signal is "none";
    signal ap_CS_fsm_state125 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state125 : signal is "none";
    signal currentSolution_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_528 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state122 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state122 : signal is "none";
    signal indvarinc_fu_532_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvarinc_reg_1902 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_1_fu_562_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_reg_1907 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvarinc1_fu_568_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_V_fu_606_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_V_reg_1956 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_8_fu_636_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_reg_1961 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond1_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_fu_648_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_V_reg_1969 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state5 : BOOLEAN;
    signal tmp_10_fu_1890_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_10_reg_1974 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_11_fu_686_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_11_reg_1979 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvarinc2_fu_724_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_V_1_fu_747_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_14_fu_878_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_2007 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal iterate_V_fu_884_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal iterate_V_reg_2011 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_43_fu_1026_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_43_reg_2016 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_44_fu_1032_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_reg_2022 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_4_cast1_fu_1048_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal ret_V_4_cast1_reg_2033 : STD_LOGIC_VECTOR (26 downto 0);
    signal ret_V_4_cast9_fu_1054_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal ret_V_4_cast9_reg_2038 : STD_LOGIC_VECTOR (28 downto 0);
    signal ret_V_4_cast_fu_1060_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ret_V_4_cast_reg_2043 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_18_fu_1072_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_reg_2048 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal tmp_47_fu_1100_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_47_reg_2053 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_V_1_fu_1112_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_V_1_reg_2061 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal exitcond8_fu_1106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal currentSolution_addr_2_reg_2076 : STD_LOGIC_VECTOR (2 downto 0);
    signal matrix_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal matrix_load_reg_2081 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_22_fu_1140_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_reg_2086 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal tmp_55_reg_2091 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_fu_1157_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_reg_2097 : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal tmp_57_reg_2102 : STD_LOGIC_VECTOR (18 downto 0);
    signal localFieldVal_1_fu_1215_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal tmp_19_fu_1225_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_reg_2112 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal tmp_48_reg_2119 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul7_fu_1242_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul7_reg_2125 : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal deltaEnergy_fu_1293_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal deltaEnergy_reg_2131 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal tmp_20_fu_1300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_reg_2138 : STD_LOGIC_VECTOR (0 downto 0);
    signal temperature_load_1_reg_2142 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal Ny1_fu_1321_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal Ny1_reg_2160 : STD_LOGIC_VECTOR (46 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal x_assign_fu_1327_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_reg_2166 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal sel_div_fu_1363_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_div_reg_2172 : STD_LOGIC_VECTOR (0 downto 0);
    signal Ny3_fu_1374_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal Ny3_reg_2176 : STD_LOGIC_VECTOR (46 downto 0);
    signal sel_div1_fu_1412_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_div1_reg_2182 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal mul1_fu_1423_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal mul1_reg_2186 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_65_reg_2191 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_67_reg_2197 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_v2_v_fu_1461_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_v2_v_reg_2202 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal tmp_43_i_fu_1486_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ret_V_4_fu_1595_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_cast_fu_1896_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_29_cast_reg_2221 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state116 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state116 : signal is "none";
    signal tmp_33_fu_1657_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_reg_2229 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state117 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state117 : signal is "none";
    signal tmp_80_fu_1649_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_81_reg_2234 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul3_fu_1674_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul3_reg_2240 : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_CS_fsm_state118 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state118 : signal is "none";
    signal tmp_83_reg_2245 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvars_iv_next_fu_1770_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state120 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state120 : signal is "none";
    signal tmp_35_fu_1737_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_1764_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_V_2_fu_1782_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_V_2_reg_2264 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state121 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state121 : signal is "none";
    signal ap_block_state121 : BOOLEAN;
    signal exitcond_fu_1776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_last_V_fu_1793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_last_V_reg_2274 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_85_reg_2279 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul4_fu_1811_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul4_reg_2285 : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_CS_fsm_state123 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state123 : signal is "none";
    signal tmp_87_reg_2290 : STD_LOGIC_VECTOR (18 downto 0);
    signal fpga_output_V_fu_1882_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal matrix_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal matrix_ce0 : STD_LOGIC;
    signal matrix_we0 : STD_LOGIC;
    signal matrix_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal currentSolution_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal currentSolution_ce0 : STD_LOGIC;
    signal currentSolution_we0 : STD_LOGIC;
    signal currentSolution_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal invdar_reg_369 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar1_reg_381 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_V_reg_392 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_V_1_reg_403 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal invdar2_reg_414 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_reg_425 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond3_fu_741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_reg_436 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_4_reg_448 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_6_reg_459 : STD_LOGIC_VECTOR (2 downto 0);
    signal localFieldVal_reg_470 : STD_LOGIC_VECTOR (21 downto 0);
    signal prob_reg_482 : STD_LOGIC_VECTOR (13 downto 0);
    signal t_V_2_reg_500 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_27_cast_fu_583_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_cast_fu_716_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_730_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_868_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_58_cast_fu_1132_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_1118_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_38_fu_1788_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_1_fu_845_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_keep_V_fu_234 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_fu_238 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_fu_242 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_id_V_fu_246 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_dest_V_fu_250 : STD_LOGIC_VECTOR (5 downto 0);
    signal temperature_fu_254 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_1725_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state119 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state119 : signal is "none";
    signal tmp_12_cast_cast_fu_720_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_15_cast_cast_fu_859_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_1623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_1629_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_538_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_550_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_546_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl1_cast_fu_558_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_cast_fu_574_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_fu_578_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_612_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_fu_624_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl2_cast_fu_620_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl3_cast_fu_632_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_12_cast_fu_682_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_44_i_fu_763_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_i_fu_753_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_45_i_fu_773_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_47_i_fu_783_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp2_fu_807_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp1_fu_801_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_i_fu_813_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_23_fu_819_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_fu_823_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_515_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_30_fu_837_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_831_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_12_fu_793_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_i1_fu_900_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_i1_fu_890_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_45_i1_fu_910_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_47_i1_fu_920_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp4_fu_936_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp3_fu_930_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_i1_fu_942_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_39_fu_962_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_40_fu_984_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_41_fu_1006_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_36_fu_948_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_42_fu_1018_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_31_fu_1010_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_29_fu_996_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_24_fu_988_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_17_fu_974_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_16_fu_966_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_15_fu_952_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1066_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1066_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1066_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_fu_1076_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_46_fu_1088_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl4_cast_fu_1080_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl5_cast_fu_1092_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_21_cast_fu_1123_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_54_fu_1127_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_22_fu_1140_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_fu_1157_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal neg_mul_fu_1173_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_56_fu_1178_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_v1_v_fu_1188_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_fu_1194_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal neg_ti_fu_1198_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_58_fu_1204_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_59_fu_1208_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_19_fu_1225_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul7_fu_1242_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal neg_mul8_fu_1248_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_49_fu_1253_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_51_fu_1267_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_50_fu_1263_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_fu_1276_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_fu_1280_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal neg_ti1_fu_1287_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_61_fu_1308_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1312_p0 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1312_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal Ny1_fu_1321_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1312_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal x_fu_1338_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal slt_fu_1341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt1_fu_1352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_63_fu_1331_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_1346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev1_fu_1357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Ny3_fu_1374_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal x1_fu_1387_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal slt2_fu_1390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt3_fu_1401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_64_fu_1380_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev2_fu_1395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev3_fu_1406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul1_fu_1423_p0 : STD_LOGIC_VECTOR (20 downto 0);
    signal neg_mul1_fu_1446_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_66_fu_1451_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc1_fu_1467_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal neg_ti2_fu_1470_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_68_fu_1476_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_69_fu_1479_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_70_fu_1510_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_71_fu_1535_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_44_i2_fu_1501_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_i3_fu_1492_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_45_i2_fu_1519_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_47_i2_fu_1526_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp6_fu_1557_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp5_fu_1551_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_i2_fu_1563_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_72_fu_1569_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_73_fu_1573_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal r_V_2_fu_1544_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_75_fu_1587_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_74_fu_1581_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1609_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1609_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1609_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_76_fu_1619_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal prob_cast_fu_1615_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul2_fu_1643_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul2_fu_1643_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_33_fu_1657_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul3_fu_1674_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal neg_mul2_fu_1690_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_82_fu_1695_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_77_fu_1705_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_78_fu_1709_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_79_fu_1712_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal neg_ti3_fu_1719_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_84_fu_1743_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_fu_1753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_1759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_85_fu_1799_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul4_fu_1811_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal neg_mul3_fu_1847_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_86_fu_1852_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_v_v_fu_1862_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_88_fu_1868_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal neg_ti4_fu_1872_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_89_fu_1878_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_1890_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_29_cast_fu_1896_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_29_cast_fu_1896_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1066_ap_start : STD_LOGIC;
    signal grp_fu_1066_ap_done : STD_LOGIC;
    signal grp_fu_1312_ap_start : STD_LOGIC;
    signal grp_fu_1312_ap_done : STD_LOGIC;
    signal grp_fu_1609_ap_start : STD_LOGIC;
    signal grp_fu_1609_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (124 downto 0);
    signal mul2_fu_1643_p00 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_29_cast_fu_1896_p00 : STD_LOGIC_VECTOR (23 downto 0);

    component maxCut_srem_32ns_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component maxCut_sdiv_21ns_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (20 downto 0);
        din1 : IN STD_LOGIC_VECTOR (20 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component maxCut_urem_32ns_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component maxCut_mul_mul_8sfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component maxCut_mul_mul_14g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component maxCut_matrix IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (23 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component maxCut_currentSolbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component maxCut_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    maxCut_AXILiteS_s_axi_U : component maxCut_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    matrix_U : component maxCut_matrix
    generic map (
        DataWidth => 24,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matrix_address0,
        ce0 => matrix_ce0,
        we0 => matrix_we0,
        d0 => matrix_d0,
        q0 => matrix_q0);

    currentSolution_U : component maxCut_currentSolbkb
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => currentSolution_address0,
        ce0 => currentSolution_ce0,
        we0 => currentSolution_we0,
        d0 => currentSolution_d0,
        q0 => currentSolution_q0);

    maxCut_srem_32ns_cud_U1 : component maxCut_srem_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_1066_ap_start,
        done => grp_fu_1066_ap_done,
        din0 => grp_fu_1066_p0,
        din1 => grp_fu_1066_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1066_p2);

    maxCut_sdiv_21ns_dEe_U2 : component maxCut_sdiv_21ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 25,
        din0_WIDTH => 21,
        din1_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_1312_ap_start,
        done => grp_fu_1312_ap_done,
        din0 => grp_fu_1312_p0,
        din1 => grp_fu_1312_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1312_p2);

    maxCut_urem_32ns_eOg_U3 : component maxCut_urem_32ns_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_1609_ap_start,
        done => grp_fu_1609_ap_done,
        din0 => grp_fu_1609_p0,
        din1 => grp_fu_1609_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1609_p2);

    maxCut_mul_mul_8sfYi_U4 : component maxCut_mul_mul_8sfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        dout_WIDTH => 23)
    port map (
        din0 => input_stream_V_data_V_0_data_out,
        din1 => tmp_10_fu_1890_p1,
        dout => tmp_10_fu_1890_p2);

    maxCut_mul_mul_14g8j_U5 : component maxCut_mul_mul_14g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 11,
        dout_WIDTH => 24)
    port map (
        din0 => tmp_29_cast_fu_1896_p0,
        din1 => tmp_29_cast_fu_1896_p1,
        dout => tmp_29_cast_fu_1896_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    input_stream_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_stream_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((input_stream_V_data_V_0_ack_out = ap_const_logic_1) and (input_stream_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        input_stream_V_data_V_0_sel_rd <= not(input_stream_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_stream_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_stream_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((input_stream_V_data_V_0_ack_in = ap_const_logic_1) and (input_stream_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        input_stream_V_data_V_0_sel_wr <= not(input_stream_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_stream_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_stream_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((input_stream_V_data_V_0_vld_in = ap_const_logic_0) and (input_stream_V_data_V_0_state = ap_const_lv2_2)) or ((input_stream_V_data_V_0_vld_in = ap_const_logic_0) and (input_stream_V_data_V_0_ack_out = ap_const_logic_1) and (input_stream_V_data_V_0_state = ap_const_lv2_3)))) then 
                    input_stream_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((input_stream_V_data_V_0_ack_out = ap_const_logic_0) and (input_stream_V_data_V_0_state = ap_const_lv2_1)) or ((input_stream_V_data_V_0_ack_out = ap_const_logic_0) and (input_stream_V_data_V_0_vld_in = ap_const_logic_1) and (input_stream_V_data_V_0_state = ap_const_lv2_3)))) then 
                    input_stream_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((input_stream_V_data_V_0_vld_in = ap_const_logic_0) and (input_stream_V_data_V_0_ack_out = ap_const_logic_1))) and not(((input_stream_V_data_V_0_ack_out = ap_const_logic_0) and (input_stream_V_data_V_0_vld_in = ap_const_logic_1))) and (input_stream_V_data_V_0_state = ap_const_lv2_3)) or ((input_stream_V_data_V_0_ack_out = ap_const_logic_1) and (input_stream_V_data_V_0_state = ap_const_lv2_1)) or ((input_stream_V_data_V_0_vld_in = ap_const_logic_1) and (input_stream_V_data_V_0_state = ap_const_lv2_2)))) then 
                    input_stream_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    input_stream_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_stream_V_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_stream_V_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((input_stream_V_dest_V_0_ack_out = ap_const_logic_1) and (input_stream_V_dest_V_0_vld_out = ap_const_logic_1))) then 
                                        input_stream_V_dest_V_0_sel_rd <= not(input_stream_V_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_stream_V_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_stream_V_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((input_stream_V_dest_V_0_ack_in = ap_const_logic_1) and (input_stream_V_dest_V_0_vld_in = ap_const_logic_1))) then 
                                        input_stream_V_dest_V_0_sel_wr <= not(input_stream_V_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_stream_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_stream_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((input_stream_V_dest_V_0_vld_in = ap_const_logic_0) and (input_stream_V_dest_V_0_state = ap_const_lv2_2)) or ((input_stream_V_dest_V_0_vld_in = ap_const_logic_0) and (input_stream_V_dest_V_0_ack_out = ap_const_logic_1) and (input_stream_V_dest_V_0_state = ap_const_lv2_3)))) then 
                    input_stream_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((input_stream_V_dest_V_0_ack_out = ap_const_logic_0) and (input_stream_V_dest_V_0_state = ap_const_lv2_1)) or ((input_stream_V_dest_V_0_ack_out = ap_const_logic_0) and (input_stream_V_dest_V_0_vld_in = ap_const_logic_1) and (input_stream_V_dest_V_0_state = ap_const_lv2_3)))) then 
                    input_stream_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((input_stream_V_dest_V_0_vld_in = ap_const_logic_0) and (input_stream_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((input_stream_V_dest_V_0_ack_out = ap_const_logic_0) and (input_stream_V_dest_V_0_vld_in = ap_const_logic_1))) and (input_stream_V_dest_V_0_state = ap_const_lv2_3)) or ((input_stream_V_dest_V_0_ack_out = ap_const_logic_1) and (input_stream_V_dest_V_0_state = ap_const_lv2_1)) or ((input_stream_V_dest_V_0_vld_in = ap_const_logic_1) and (input_stream_V_dest_V_0_state = ap_const_lv2_2)))) then 
                    input_stream_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    input_stream_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_stream_V_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_stream_V_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((input_stream_V_id_V_0_ack_out = ap_const_logic_1) and (input_stream_V_id_V_0_vld_out = ap_const_logic_1))) then 
                                        input_stream_V_id_V_0_sel_rd <= not(input_stream_V_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_stream_V_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_stream_V_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((input_stream_V_id_V_0_ack_in = ap_const_logic_1) and (input_stream_V_id_V_0_vld_in = ap_const_logic_1))) then 
                                        input_stream_V_id_V_0_sel_wr <= not(input_stream_V_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_stream_V_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_stream_V_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((input_stream_V_id_V_0_vld_in = ap_const_logic_0) and (input_stream_V_id_V_0_state = ap_const_lv2_2)) or ((input_stream_V_id_V_0_vld_in = ap_const_logic_0) and (input_stream_V_id_V_0_ack_out = ap_const_logic_1) and (input_stream_V_id_V_0_state = ap_const_lv2_3)))) then 
                    input_stream_V_id_V_0_state <= ap_const_lv2_2;
                elsif ((((input_stream_V_id_V_0_ack_out = ap_const_logic_0) and (input_stream_V_id_V_0_state = ap_const_lv2_1)) or ((input_stream_V_id_V_0_ack_out = ap_const_logic_0) and (input_stream_V_id_V_0_vld_in = ap_const_logic_1) and (input_stream_V_id_V_0_state = ap_const_lv2_3)))) then 
                    input_stream_V_id_V_0_state <= ap_const_lv2_1;
                elsif (((not(((input_stream_V_id_V_0_vld_in = ap_const_logic_0) and (input_stream_V_id_V_0_ack_out = ap_const_logic_1))) and not(((input_stream_V_id_V_0_ack_out = ap_const_logic_0) and (input_stream_V_id_V_0_vld_in = ap_const_logic_1))) and (input_stream_V_id_V_0_state = ap_const_lv2_3)) or ((input_stream_V_id_V_0_ack_out = ap_const_logic_1) and (input_stream_V_id_V_0_state = ap_const_lv2_1)) or ((input_stream_V_id_V_0_vld_in = ap_const_logic_1) and (input_stream_V_id_V_0_state = ap_const_lv2_2)))) then 
                    input_stream_V_id_V_0_state <= ap_const_lv2_3;
                else 
                    input_stream_V_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_stream_V_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_stream_V_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((input_stream_V_keep_V_0_ack_out = ap_const_logic_1) and (input_stream_V_keep_V_0_vld_out = ap_const_logic_1))) then 
                                        input_stream_V_keep_V_0_sel_rd <= not(input_stream_V_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_stream_V_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_stream_V_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((input_stream_V_keep_V_0_ack_in = ap_const_logic_1) and (input_stream_V_keep_V_0_vld_in = ap_const_logic_1))) then 
                                        input_stream_V_keep_V_0_sel_wr <= not(input_stream_V_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_stream_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_stream_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((input_stream_V_keep_V_0_vld_in = ap_const_logic_0) and (input_stream_V_keep_V_0_state = ap_const_lv2_2)) or ((input_stream_V_keep_V_0_vld_in = ap_const_logic_0) and (input_stream_V_keep_V_0_ack_out = ap_const_logic_1) and (input_stream_V_keep_V_0_state = ap_const_lv2_3)))) then 
                    input_stream_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((input_stream_V_keep_V_0_ack_out = ap_const_logic_0) and (input_stream_V_keep_V_0_state = ap_const_lv2_1)) or ((input_stream_V_keep_V_0_ack_out = ap_const_logic_0) and (input_stream_V_keep_V_0_vld_in = ap_const_logic_1) and (input_stream_V_keep_V_0_state = ap_const_lv2_3)))) then 
                    input_stream_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((input_stream_V_keep_V_0_vld_in = ap_const_logic_0) and (input_stream_V_keep_V_0_ack_out = ap_const_logic_1))) and not(((input_stream_V_keep_V_0_ack_out = ap_const_logic_0) and (input_stream_V_keep_V_0_vld_in = ap_const_logic_1))) and (input_stream_V_keep_V_0_state = ap_const_lv2_3)) or ((input_stream_V_keep_V_0_ack_out = ap_const_logic_1) and (input_stream_V_keep_V_0_state = ap_const_lv2_1)) or ((input_stream_V_keep_V_0_vld_in = ap_const_logic_1) and (input_stream_V_keep_V_0_state = ap_const_lv2_2)))) then 
                    input_stream_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    input_stream_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_stream_V_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_stream_V_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((input_stream_V_strb_V_0_ack_out = ap_const_logic_1) and (input_stream_V_strb_V_0_vld_out = ap_const_logic_1))) then 
                                        input_stream_V_strb_V_0_sel_rd <= not(input_stream_V_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_stream_V_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_stream_V_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((input_stream_V_strb_V_0_ack_in = ap_const_logic_1) and (input_stream_V_strb_V_0_vld_in = ap_const_logic_1))) then 
                                        input_stream_V_strb_V_0_sel_wr <= not(input_stream_V_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_stream_V_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_stream_V_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((input_stream_V_strb_V_0_vld_in = ap_const_logic_0) and (input_stream_V_strb_V_0_state = ap_const_lv2_2)) or ((input_stream_V_strb_V_0_vld_in = ap_const_logic_0) and (input_stream_V_strb_V_0_ack_out = ap_const_logic_1) and (input_stream_V_strb_V_0_state = ap_const_lv2_3)))) then 
                    input_stream_V_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((input_stream_V_strb_V_0_ack_out = ap_const_logic_0) and (input_stream_V_strb_V_0_state = ap_const_lv2_1)) or ((input_stream_V_strb_V_0_ack_out = ap_const_logic_0) and (input_stream_V_strb_V_0_vld_in = ap_const_logic_1) and (input_stream_V_strb_V_0_state = ap_const_lv2_3)))) then 
                    input_stream_V_strb_V_0_state <= ap_const_lv2_1;
                elsif (((not(((input_stream_V_strb_V_0_vld_in = ap_const_logic_0) and (input_stream_V_strb_V_0_ack_out = ap_const_logic_1))) and not(((input_stream_V_strb_V_0_ack_out = ap_const_logic_0) and (input_stream_V_strb_V_0_vld_in = ap_const_logic_1))) and (input_stream_V_strb_V_0_state = ap_const_lv2_3)) or ((input_stream_V_strb_V_0_ack_out = ap_const_logic_1) and (input_stream_V_strb_V_0_state = ap_const_lv2_1)) or ((input_stream_V_strb_V_0_vld_in = ap_const_logic_1) and (input_stream_V_strb_V_0_state = ap_const_lv2_2)))) then 
                    input_stream_V_strb_V_0_state <= ap_const_lv2_3;
                else 
                    input_stream_V_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_stream_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_stream_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((input_stream_V_user_V_0_ack_out = ap_const_logic_1) and (input_stream_V_user_V_0_vld_out = ap_const_logic_1))) then 
                                        input_stream_V_user_V_0_sel_rd <= not(input_stream_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_stream_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_stream_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((input_stream_V_user_V_0_ack_in = ap_const_logic_1) and (input_stream_V_user_V_0_vld_in = ap_const_logic_1))) then 
                                        input_stream_V_user_V_0_sel_wr <= not(input_stream_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_stream_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_stream_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((input_stream_V_user_V_0_vld_in = ap_const_logic_0) and (input_stream_V_user_V_0_state = ap_const_lv2_2)) or ((input_stream_V_user_V_0_vld_in = ap_const_logic_0) and (input_stream_V_user_V_0_ack_out = ap_const_logic_1) and (input_stream_V_user_V_0_state = ap_const_lv2_3)))) then 
                    input_stream_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((input_stream_V_user_V_0_ack_out = ap_const_logic_0) and (input_stream_V_user_V_0_state = ap_const_lv2_1)) or ((input_stream_V_user_V_0_ack_out = ap_const_logic_0) and (input_stream_V_user_V_0_vld_in = ap_const_logic_1) and (input_stream_V_user_V_0_state = ap_const_lv2_3)))) then 
                    input_stream_V_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((input_stream_V_user_V_0_vld_in = ap_const_logic_0) and (input_stream_V_user_V_0_ack_out = ap_const_logic_1))) and not(((input_stream_V_user_V_0_ack_out = ap_const_logic_0) and (input_stream_V_user_V_0_vld_in = ap_const_logic_1))) and (input_stream_V_user_V_0_state = ap_const_lv2_3)) or ((input_stream_V_user_V_0_ack_out = ap_const_logic_1) and (input_stream_V_user_V_0_state = ap_const_lv2_1)) or ((input_stream_V_user_V_0_vld_in = ap_const_logic_1) and (input_stream_V_user_V_0_state = ap_const_lv2_2)))) then 
                    input_stream_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    input_stream_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_stream_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_stream_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_stream_V_data_V_1_ack_out = ap_const_logic_1) and (output_stream_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        output_stream_V_data_V_1_sel_rd <= not(output_stream_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_stream_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_stream_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((output_stream_V_data_V_1_ack_in = ap_const_logic_1) and (output_stream_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        output_stream_V_data_V_1_sel_wr <= not(output_stream_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_stream_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_stream_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((output_stream_V_data_V_1_vld_in = ap_const_logic_0) and (output_stream_V_data_V_1_state = ap_const_lv2_2)) or ((output_stream_V_data_V_1_vld_in = ap_const_logic_0) and (output_stream_V_data_V_1_ack_out = ap_const_logic_1) and (output_stream_V_data_V_1_state = ap_const_lv2_3)))) then 
                    output_stream_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((output_stream_V_data_V_1_ack_out = ap_const_logic_0) and (output_stream_V_data_V_1_state = ap_const_lv2_1)) or ((output_stream_V_data_V_1_ack_out = ap_const_logic_0) and (output_stream_V_data_V_1_vld_in = ap_const_logic_1) and (output_stream_V_data_V_1_state = ap_const_lv2_3)))) then 
                    output_stream_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((output_stream_V_data_V_1_vld_in = ap_const_logic_0) and (output_stream_V_data_V_1_ack_out = ap_const_logic_1))) and not(((output_stream_V_data_V_1_ack_out = ap_const_logic_0) and (output_stream_V_data_V_1_vld_in = ap_const_logic_1))) and (output_stream_V_data_V_1_state = ap_const_lv2_3)) or ((output_stream_V_data_V_1_ack_out = ap_const_logic_1) and (output_stream_V_data_V_1_state = ap_const_lv2_1)) or ((output_stream_V_data_V_1_vld_in = ap_const_logic_1) and (output_stream_V_data_V_1_state = ap_const_lv2_2)))) then 
                    output_stream_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    output_stream_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_stream_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_stream_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_stream_V_dest_V_1_ack_out = ap_const_logic_1) and (output_stream_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        output_stream_V_dest_V_1_sel_rd <= not(output_stream_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_stream_V_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_stream_V_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((output_stream_V_dest_V_1_ack_in = ap_const_logic_1) and (output_stream_V_dest_V_1_vld_in = ap_const_logic_1))) then 
                                        output_stream_V_dest_V_1_sel_wr <= not(output_stream_V_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_stream_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_stream_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((output_stream_V_dest_V_1_vld_in = ap_const_logic_0) and (output_stream_V_dest_V_1_state = ap_const_lv2_2)) or ((output_stream_V_dest_V_1_vld_in = ap_const_logic_0) and (output_stream_V_dest_V_1_ack_out = ap_const_logic_1) and (output_stream_V_dest_V_1_state = ap_const_lv2_3)))) then 
                    output_stream_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((output_stream_V_dest_V_1_ack_out = ap_const_logic_0) and (output_stream_V_dest_V_1_state = ap_const_lv2_1)) or ((output_stream_V_dest_V_1_ack_out = ap_const_logic_0) and (output_stream_V_dest_V_1_vld_in = ap_const_logic_1) and (output_stream_V_dest_V_1_state = ap_const_lv2_3)))) then 
                    output_stream_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((output_stream_V_dest_V_1_vld_in = ap_const_logic_0) and (output_stream_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((output_stream_V_dest_V_1_ack_out = ap_const_logic_0) and (output_stream_V_dest_V_1_vld_in = ap_const_logic_1))) and (output_stream_V_dest_V_1_state = ap_const_lv2_3)) or ((output_stream_V_dest_V_1_ack_out = ap_const_logic_1) and (output_stream_V_dest_V_1_state = ap_const_lv2_1)) or ((output_stream_V_dest_V_1_vld_in = ap_const_logic_1) and (output_stream_V_dest_V_1_state = ap_const_lv2_2)))) then 
                    output_stream_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    output_stream_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_stream_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_stream_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_stream_V_id_V_1_ack_out = ap_const_logic_1) and (output_stream_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        output_stream_V_id_V_1_sel_rd <= not(output_stream_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_stream_V_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_stream_V_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((output_stream_V_id_V_1_ack_in = ap_const_logic_1) and (output_stream_V_id_V_1_vld_in = ap_const_logic_1))) then 
                                        output_stream_V_id_V_1_sel_wr <= not(output_stream_V_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_stream_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_stream_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((output_stream_V_id_V_1_vld_in = ap_const_logic_0) and (output_stream_V_id_V_1_state = ap_const_lv2_2)) or ((output_stream_V_id_V_1_vld_in = ap_const_logic_0) and (output_stream_V_id_V_1_ack_out = ap_const_logic_1) and (output_stream_V_id_V_1_state = ap_const_lv2_3)))) then 
                    output_stream_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((output_stream_V_id_V_1_ack_out = ap_const_logic_0) and (output_stream_V_id_V_1_state = ap_const_lv2_1)) or ((output_stream_V_id_V_1_ack_out = ap_const_logic_0) and (output_stream_V_id_V_1_vld_in = ap_const_logic_1) and (output_stream_V_id_V_1_state = ap_const_lv2_3)))) then 
                    output_stream_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((output_stream_V_id_V_1_vld_in = ap_const_logic_0) and (output_stream_V_id_V_1_ack_out = ap_const_logic_1))) and not(((output_stream_V_id_V_1_ack_out = ap_const_logic_0) and (output_stream_V_id_V_1_vld_in = ap_const_logic_1))) and (output_stream_V_id_V_1_state = ap_const_lv2_3)) or ((output_stream_V_id_V_1_ack_out = ap_const_logic_1) and (output_stream_V_id_V_1_state = ap_const_lv2_1)) or ((output_stream_V_id_V_1_vld_in = ap_const_logic_1) and (output_stream_V_id_V_1_state = ap_const_lv2_2)))) then 
                    output_stream_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    output_stream_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_stream_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_stream_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_stream_V_keep_V_1_ack_out = ap_const_logic_1) and (output_stream_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        output_stream_V_keep_V_1_sel_rd <= not(output_stream_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_stream_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_stream_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((output_stream_V_keep_V_1_ack_in = ap_const_logic_1) and (output_stream_V_keep_V_1_vld_in = ap_const_logic_1))) then 
                                        output_stream_V_keep_V_1_sel_wr <= not(output_stream_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_stream_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_stream_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((output_stream_V_keep_V_1_vld_in = ap_const_logic_0) and (output_stream_V_keep_V_1_state = ap_const_lv2_2)) or ((output_stream_V_keep_V_1_vld_in = ap_const_logic_0) and (output_stream_V_keep_V_1_ack_out = ap_const_logic_1) and (output_stream_V_keep_V_1_state = ap_const_lv2_3)))) then 
                    output_stream_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((output_stream_V_keep_V_1_ack_out = ap_const_logic_0) and (output_stream_V_keep_V_1_state = ap_const_lv2_1)) or ((output_stream_V_keep_V_1_ack_out = ap_const_logic_0) and (output_stream_V_keep_V_1_vld_in = ap_const_logic_1) and (output_stream_V_keep_V_1_state = ap_const_lv2_3)))) then 
                    output_stream_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((output_stream_V_keep_V_1_vld_in = ap_const_logic_0) and (output_stream_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((output_stream_V_keep_V_1_ack_out = ap_const_logic_0) and (output_stream_V_keep_V_1_vld_in = ap_const_logic_1))) and (output_stream_V_keep_V_1_state = ap_const_lv2_3)) or ((output_stream_V_keep_V_1_ack_out = ap_const_logic_1) and (output_stream_V_keep_V_1_state = ap_const_lv2_1)) or ((output_stream_V_keep_V_1_vld_in = ap_const_logic_1) and (output_stream_V_keep_V_1_state = ap_const_lv2_2)))) then 
                    output_stream_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    output_stream_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_stream_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_stream_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_stream_V_last_V_1_ack_out = ap_const_logic_1) and (output_stream_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        output_stream_V_last_V_1_sel_rd <= not(output_stream_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_stream_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_stream_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((output_stream_V_last_V_1_ack_in = ap_const_logic_1) and (output_stream_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        output_stream_V_last_V_1_sel_wr <= not(output_stream_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_stream_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_stream_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((output_stream_V_last_V_1_vld_in = ap_const_logic_0) and (output_stream_V_last_V_1_state = ap_const_lv2_2)) or ((output_stream_V_last_V_1_vld_in = ap_const_logic_0) and (output_stream_V_last_V_1_ack_out = ap_const_logic_1) and (output_stream_V_last_V_1_state = ap_const_lv2_3)))) then 
                    output_stream_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((output_stream_V_last_V_1_ack_out = ap_const_logic_0) and (output_stream_V_last_V_1_state = ap_const_lv2_1)) or ((output_stream_V_last_V_1_ack_out = ap_const_logic_0) and (output_stream_V_last_V_1_vld_in = ap_const_logic_1) and (output_stream_V_last_V_1_state = ap_const_lv2_3)))) then 
                    output_stream_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((output_stream_V_last_V_1_vld_in = ap_const_logic_0) and (output_stream_V_last_V_1_ack_out = ap_const_logic_1))) and not(((output_stream_V_last_V_1_ack_out = ap_const_logic_0) and (output_stream_V_last_V_1_vld_in = ap_const_logic_1))) and (output_stream_V_last_V_1_state = ap_const_lv2_3)) or ((output_stream_V_last_V_1_ack_out = ap_const_logic_1) and (output_stream_V_last_V_1_state = ap_const_lv2_1)) or ((output_stream_V_last_V_1_vld_in = ap_const_logic_1) and (output_stream_V_last_V_1_state = ap_const_lv2_2)))) then 
                    output_stream_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    output_stream_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_stream_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_stream_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_stream_V_strb_V_1_ack_out = ap_const_logic_1) and (output_stream_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        output_stream_V_strb_V_1_sel_rd <= not(output_stream_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_stream_V_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_stream_V_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((output_stream_V_strb_V_1_ack_in = ap_const_logic_1) and (output_stream_V_strb_V_1_vld_in = ap_const_logic_1))) then 
                                        output_stream_V_strb_V_1_sel_wr <= not(output_stream_V_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_stream_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_stream_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((output_stream_V_strb_V_1_vld_in = ap_const_logic_0) and (output_stream_V_strb_V_1_state = ap_const_lv2_2)) or ((output_stream_V_strb_V_1_vld_in = ap_const_logic_0) and (output_stream_V_strb_V_1_ack_out = ap_const_logic_1) and (output_stream_V_strb_V_1_state = ap_const_lv2_3)))) then 
                    output_stream_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((output_stream_V_strb_V_1_ack_out = ap_const_logic_0) and (output_stream_V_strb_V_1_state = ap_const_lv2_1)) or ((output_stream_V_strb_V_1_ack_out = ap_const_logic_0) and (output_stream_V_strb_V_1_vld_in = ap_const_logic_1) and (output_stream_V_strb_V_1_state = ap_const_lv2_3)))) then 
                    output_stream_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((output_stream_V_strb_V_1_vld_in = ap_const_logic_0) and (output_stream_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((output_stream_V_strb_V_1_ack_out = ap_const_logic_0) and (output_stream_V_strb_V_1_vld_in = ap_const_logic_1))) and (output_stream_V_strb_V_1_state = ap_const_lv2_3)) or ((output_stream_V_strb_V_1_ack_out = ap_const_logic_1) and (output_stream_V_strb_V_1_state = ap_const_lv2_1)) or ((output_stream_V_strb_V_1_vld_in = ap_const_logic_1) and (output_stream_V_strb_V_1_state = ap_const_lv2_2)))) then 
                    output_stream_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    output_stream_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_stream_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_stream_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_stream_V_user_V_1_ack_out = ap_const_logic_1) and (output_stream_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        output_stream_V_user_V_1_sel_rd <= not(output_stream_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_stream_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_stream_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((output_stream_V_user_V_1_ack_in = ap_const_logic_1) and (output_stream_V_user_V_1_vld_in = ap_const_logic_1))) then 
                                        output_stream_V_user_V_1_sel_wr <= not(output_stream_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_stream_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_stream_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((output_stream_V_user_V_1_vld_in = ap_const_logic_0) and (output_stream_V_user_V_1_state = ap_const_lv2_2)) or ((output_stream_V_user_V_1_vld_in = ap_const_logic_0) and (output_stream_V_user_V_1_ack_out = ap_const_logic_1) and (output_stream_V_user_V_1_state = ap_const_lv2_3)))) then 
                    output_stream_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((output_stream_V_user_V_1_ack_out = ap_const_logic_0) and (output_stream_V_user_V_1_state = ap_const_lv2_1)) or ((output_stream_V_user_V_1_ack_out = ap_const_logic_0) and (output_stream_V_user_V_1_vld_in = ap_const_logic_1) and (output_stream_V_user_V_1_state = ap_const_lv2_3)))) then 
                    output_stream_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((output_stream_V_user_V_1_vld_in = ap_const_logic_0) and (output_stream_V_user_V_1_ack_out = ap_const_logic_1))) and not(((output_stream_V_user_V_1_ack_out = ap_const_logic_0) and (output_stream_V_user_V_1_vld_in = ap_const_logic_1))) and (output_stream_V_user_V_1_state = ap_const_lv2_3)) or ((output_stream_V_user_V_1_ack_out = ap_const_logic_1) and (output_stream_V_user_V_1_state = ap_const_lv2_1)) or ((output_stream_V_user_V_1_vld_in = ap_const_logic_1) and (output_stream_V_user_V_1_state = ap_const_lv2_2)))) then 
                    output_stream_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    output_stream_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    indvars_iv_reg_436_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond3_fu_741_p2 = ap_const_lv1_1))) then 
                indvars_iv_reg_436 <= ap_const_lv14_4;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state120) and (tmp_14_reg_2007 = ap_const_lv1_1) and (or_cond_fu_1764_p2 = ap_const_lv1_0) and (tmp_35_fu_1737_p2 = ap_const_lv1_0))) then 
                indvars_iv_reg_436 <= indvars_iv_next_fu_1770_p2;
            end if; 
        end if;
    end process;

    invdar1_reg_381_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_2_fu_588_p2 = ap_const_lv1_0))) then 
                invdar1_reg_381 <= indvarinc1_fu_568_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                invdar1_reg_381 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    invdar2_reg_414_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_600_p2 = ap_const_lv1_1))) then 
                invdar2_reg_414 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_4_fu_735_p2 = ap_const_lv1_0))) then 
                invdar2_reg_414 <= indvarinc2_fu_724_p2;
            end if; 
        end if;
    end process;

    invdar_reg_369_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_2_fu_588_p2 = ap_const_lv1_1) and (tmp_3_fu_594_p2 = ap_const_lv1_0))) then 
                invdar_reg_369 <= indvarinc_reg_1902;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                invdar_reg_369 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    localFieldVal_reg_470_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                localFieldVal_reg_470 <= localFieldVal_1_fu_1215_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                localFieldVal_reg_470 <= ap_const_lv22_0;
            end if; 
        end if;
    end process;

    p_4_reg_448_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond3_fu_741_p2 = ap_const_lv1_1))) then 
                p_4_reg_448 <= ap_const_lv12_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state120) and (tmp_14_reg_2007 = ap_const_lv1_1) and (or_cond_fu_1764_p2 = ap_const_lv1_0) and (tmp_35_fu_1737_p2 = ap_const_lv1_0))) then 
                p_4_reg_448 <= iterate_V_reg_2011;
            end if; 
        end if;
    end process;

    p_6_reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                p_6_reg_459 <= j_V_1_reg_2061;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                p_6_reg_459 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    p_s_reg_425_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_4_fu_735_p2 = ap_const_lv1_1))) then 
                p_s_reg_425 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond3_fu_741_p2 = ap_const_lv1_0))) then 
                p_s_reg_425 <= i_V_1_fu_747_p2;
            end if; 
        end if;
    end process;

    prob_reg_482_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state78) and (sel_div_fu_1363_p3 = ap_const_lv1_1))) then 
                prob_reg_482 <= ap_const_lv14_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state81) and (sel_div1_reg_2182 = ap_const_lv1_0) and (sel_div_reg_2172 = ap_const_lv1_0) and (tmp_20_reg_2138 = ap_const_lv1_0))) then 
                prob_reg_482 <= tmp_43_i_fu_1486_p2;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state79) and (sel_div1_fu_1412_p3 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state53) and (tmp_20_fu_1300_p2 = ap_const_lv1_1)))) then 
                prob_reg_482 <= ap_const_lv14_2710;
            end if; 
        end if;
    end process;

    reg_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
                reg_V <= ret_V_4_fu_1595_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond3_fu_741_p2 = ap_const_lv1_0))) then 
                reg_V <= ret_V_1_fu_845_p3;
            end if; 
        end if;
    end process;

    t_V_1_reg_403_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_600_p2 = ap_const_lv1_0))) then 
                t_V_1_reg_403 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                t_V_1_reg_403 <= j_V_reg_1969;
            end if; 
        end if;
    end process;

    t_V_2_reg_500_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((output_stream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state125))) then 
                t_V_2_reg_500 <= i_V_2_reg_2264;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state120) and ((tmp_14_reg_2007 = ap_const_lv1_0) or ((or_cond_fu_1764_p2 = ap_const_lv1_1) or (tmp_35_fu_1737_p2 = ap_const_lv1_1))))) then 
                t_V_2_reg_500 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    t_V_reg_392_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((input_stream_V_data_V_0_vld_out = ap_const_logic_0) and (exitcond2_fu_642_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_642_p2 = ap_const_lv1_1))) then 
                t_V_reg_392 <= i_V_reg_1956;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_3_fu_594_p2 = ap_const_lv1_1) and (tmp_2_fu_588_p2 = ap_const_lv1_1))) then 
                t_V_reg_392 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    temperature_fu_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state119)) then 
                temperature_fu_254 <= tmp_34_fu_1725_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond3_fu_741_p2 = ap_const_lv1_1))) then 
                temperature_fu_254 <= ap_const_lv32_30D40;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then
                Ny1_reg_2160 <= Ny1_fu_1321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state78) and (sel_div_fu_1363_p3 = ap_const_lv1_0))) then
                Ny3_reg_2176 <= Ny3_fu_1374_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond8_fu_1106_p2 = ap_const_lv1_1))) then
                currentSolution_addr_2_reg_2076 <= tmp_18_reg_2048(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                deltaEnergy_reg_2131 <= deltaEnergy_fu_1293_p3;
                tmp_20_reg_2138 <= tmp_20_fu_1300_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((output_stream_V_dest_V_1_ack_in = ap_const_logic_0) or (output_stream_V_id_V_1_ack_in = ap_const_logic_0) or (output_stream_V_last_V_1_ack_in = ap_const_logic_0) or (output_stream_V_user_V_1_ack_in = ap_const_logic_0) or (output_stream_V_strb_V_1_ack_in = ap_const_logic_0) or (output_stream_V_keep_V_1_ack_in = ap_const_logic_0) or (output_stream_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state121))) then
                i_V_2_reg_2264 <= i_V_2_fu_1782_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_V_reg_1956 <= i_V_fu_606_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                indvarinc_reg_1902 <= indvarinc_fu_532_p2;
                    tmp_1_reg_1907(6 downto 1) <= tmp_1_fu_562_p2(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_stream_V_data_V_0_load_A = ap_const_logic_1)) then
                input_stream_V_data_V_0_payload_A <= input_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_stream_V_data_V_0_load_B = ap_const_logic_1)) then
                input_stream_V_data_V_0_payload_B <= input_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_stream_V_dest_V_0_load_A = ap_const_logic_1)) then
                input_stream_V_dest_V_0_payload_A <= input_stream_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_stream_V_dest_V_0_load_B = ap_const_logic_1)) then
                input_stream_V_dest_V_0_payload_B <= input_stream_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_stream_V_id_V_0_load_A = ap_const_logic_1)) then
                input_stream_V_id_V_0_payload_A <= input_stream_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_stream_V_id_V_0_load_B = ap_const_logic_1)) then
                input_stream_V_id_V_0_payload_B <= input_stream_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_stream_V_keep_V_0_load_A = ap_const_logic_1)) then
                input_stream_V_keep_V_0_payload_A <= input_stream_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_stream_V_keep_V_0_load_B = ap_const_logic_1)) then
                input_stream_V_keep_V_0_payload_B <= input_stream_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_stream_V_strb_V_0_load_A = ap_const_logic_1)) then
                input_stream_V_strb_V_0_payload_A <= input_stream_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_stream_V_strb_V_0_load_B = ap_const_logic_1)) then
                input_stream_V_strb_V_0_payload_B <= input_stream_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_stream_V_user_V_0_load_A = ap_const_logic_1)) then
                input_stream_V_user_V_0_payload_A <= input_stream_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_stream_V_user_V_0_load_B = ap_const_logic_1)) then
                input_stream_V_user_V_0_payload_B <= input_stream_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                iterate_V_reg_2011 <= iterate_V_fu_884_p2;
                tmp_14_reg_2007 <= tmp_14_fu_878_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                j_V_1_reg_2061 <= j_V_1_fu_1112_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((input_stream_V_data_V_0_vld_out = ap_const_logic_0) and (exitcond2_fu_642_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                j_V_reg_1969 <= j_V_fu_648_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                matrix_load_reg_2081 <= matrix_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state79) and (sel_div1_fu_1412_p3 = ap_const_lv1_0))) then
                    mul1_reg_2186(46 downto 1) <= mul1_fu_1423_p2(46 downto 1);
                tmp_65_reg_2191 <= x_assign_reg_2166(31 downto 31);
                tmp_67_reg_2197 <= mul1_fu_1423_p2(46 downto 36);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state118)) then
                mul3_reg_2240 <= mul3_fu_1674_p2;
                tmp_83_reg_2245 <= mul3_fu_1674_p2(64 downto 49);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state123)) then
                mul4_reg_2285 <= mul4_fu_1811_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
                    mul7_reg_2125(64 downto 1) <= mul7_fu_1242_p2(64 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                    mul_reg_2097(64 downto 1) <= mul_fu_1157_p2(64 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((output_stream_V_dest_V_1_ack_in = ap_const_logic_0) or (output_stream_V_id_V_1_ack_in = ap_const_logic_0) or (output_stream_V_last_V_1_ack_in = ap_const_logic_0) or (output_stream_V_user_V_1_ack_in = ap_const_logic_0) or (output_stream_V_strb_V_1_ack_in = ap_const_logic_0) or (output_stream_V_keep_V_1_ack_in = ap_const_logic_0) or (output_stream_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state121) and (exitcond_fu_1776_p2 = ap_const_lv1_0))) then
                output_last_V_reg_2274 <= output_last_V_fu_1793_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_stream_V_data_V_1_load_A = ap_const_logic_1)) then
                output_stream_V_data_V_1_payload_A <= fpga_output_V_fu_1882_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_stream_V_data_V_1_load_B = ap_const_logic_1)) then
                output_stream_V_data_V_1_payload_B <= fpga_output_V_fu_1882_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_stream_V_dest_V_1_load_A = ap_const_logic_1)) then
                output_stream_V_dest_V_1_payload_A <= tmp_dest_V_fu_250;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_stream_V_dest_V_1_load_B = ap_const_logic_1)) then
                output_stream_V_dest_V_1_payload_B <= tmp_dest_V_fu_250;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_stream_V_id_V_1_load_A = ap_const_logic_1)) then
                output_stream_V_id_V_1_payload_A <= tmp_id_V_fu_246;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_stream_V_id_V_1_load_B = ap_const_logic_1)) then
                output_stream_V_id_V_1_payload_B <= tmp_id_V_fu_246;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_stream_V_keep_V_1_load_A = ap_const_logic_1)) then
                output_stream_V_keep_V_1_payload_A <= tmp_keep_V_fu_234;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_stream_V_keep_V_1_load_B = ap_const_logic_1)) then
                output_stream_V_keep_V_1_payload_B <= tmp_keep_V_fu_234;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_stream_V_last_V_1_load_A = ap_const_logic_1)) then
                output_stream_V_last_V_1_payload_A <= output_last_V_reg_2274;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_stream_V_last_V_1_load_B = ap_const_logic_1)) then
                output_stream_V_last_V_1_payload_B <= output_last_V_reg_2274;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_stream_V_strb_V_1_load_A = ap_const_logic_1)) then
                output_stream_V_strb_V_1_payload_A <= tmp_strb_V_fu_238;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_stream_V_strb_V_1_load_B = ap_const_logic_1)) then
                output_stream_V_strb_V_1_payload_B <= tmp_strb_V_fu_238;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_stream_V_user_V_1_load_A = ap_const_logic_1)) then
                output_stream_V_user_V_1_payload_A <= tmp_user_V_fu_242;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_stream_V_user_V_1_load_B = ap_const_logic_1)) then
                output_stream_V_user_V_1_payload_B <= tmp_user_V_fu_242;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state80)) then
                p_v2_v_reg_2202 <= p_v2_v_fu_1461_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state122) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state46))) then
                reg_528 <= currentSolution_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_14_fu_878_p2 = ap_const_lv1_1))) then
                ret_V_4_cast1_reg_2033 <= ret_V_4_cast1_fu_1048_p2;
                ret_V_4_cast9_reg_2038 <= ret_V_4_cast9_fu_1054_p2;
                ret_V_4_cast_reg_2043 <= ret_V_4_cast_fu_1060_p2;
                tmp_43_reg_2016 <= tmp_43_fu_1026_p2;
                tmp_44_reg_2022 <= ret_V_i1_fu_942_p2(16 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state79)) then
                sel_div1_reg_2182 <= sel_div1_fu_1412_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then
                sel_div_reg_2172 <= sel_div_fu_1363_p3;
                x_assign_reg_2166 <= x_assign_fu_1327_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                temperature_load_1_reg_2142 <= temperature_fu_254;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((input_stream_V_data_V_0_vld_out = ap_const_logic_0) and (exitcond2_fu_642_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_642_p2 = ap_const_lv1_0))) then
                tmp_10_reg_1974 <= tmp_10_fu_1890_p2;
                tmp_11_reg_1979 <= tmp_11_fu_686_p2;
                tmp_dest_V_fu_250 <= input_stream_V_dest_V_0_data_out;
                tmp_id_V_fu_246 <= input_stream_V_id_V_0_data_out;
                tmp_keep_V_fu_234 <= input_stream_V_keep_V_0_data_out;
                tmp_strb_V_fu_238 <= input_stream_V_strb_V_0_data_out;
                tmp_user_V_fu_242 <= input_stream_V_user_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                tmp_18_reg_2048 <= tmp_18_fu_1072_p1;
                    tmp_47_reg_2053(6 downto 1) <= tmp_47_fu_1100_p2(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                tmp_19_reg_2112 <= tmp_19_fu_1225_p2;
                tmp_48_reg_2119 <= tmp_19_fu_1225_p2(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                tmp_22_reg_2086 <= tmp_22_fu_1140_p2;
                tmp_55_reg_2091 <= tmp_22_fu_1140_p2(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state116)) then
                tmp_29_cast_reg_2221 <= tmp_29_cast_fu_1896_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state117) and (tmp_80_fu_1649_p3 = ap_const_lv1_0))) then
                tmp_33_reg_2229 <= tmp_33_fu_1657_p2;
                tmp_81_reg_2234 <= tmp_33_fu_1657_p2(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state48) and (tmp_55_reg_2091 = ap_const_lv1_0))) then
                tmp_57_reg_2102 <= mul_fu_1157_p2(64 downto 46);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state122)) then
                tmp_85_reg_2279 <= tmp_85_fu_1799_p1(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state123) and (tmp_85_reg_2279 = ap_const_lv1_0))) then
                tmp_87_reg_2290 <= mul4_fu_1811_p2(64 downto 46);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_600_p2 = ap_const_lv1_0))) then
                    tmp_8_reg_1961(6 downto 1) <= tmp_8_fu_636_p2(6 downto 1);
            end if;
        end if;
    end process;
    tmp_1_reg_1907(0) <= '0';
    tmp_8_reg_1961(0) <= '0';
    tmp_47_reg_2053(0) <= '0';
    mul_reg_2097(0) <= '0';
    mul7_reg_2125(0) <= '0';
    mul1_reg_2186(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, input_stream_V_data_V_0_vld_out, output_stream_V_data_V_1_ack_in, output_stream_V_data_V_1_state, output_stream_V_keep_V_1_ack_in, output_stream_V_keep_V_1_state, output_stream_V_strb_V_1_ack_in, output_stream_V_strb_V_1_state, output_stream_V_user_V_1_ack_in, output_stream_V_user_V_1_state, output_stream_V_last_V_1_ack_in, output_stream_V_last_V_1_state, output_stream_V_id_V_1_ack_in, output_stream_V_id_V_1_state, output_stream_V_dest_V_1_ack_in, output_stream_V_dest_V_1_state, ap_CS_fsm_state5, exitcond2_fu_642_p2, ap_CS_fsm_state124, ap_CS_fsm_state125, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond1_fu_600_p2, ap_CS_fsm_state7, ap_CS_fsm_state8, tmp_14_fu_878_p2, tmp_14_reg_2007, ap_CS_fsm_state9, ap_CS_fsm_state45, exitcond8_fu_1106_p2, ap_CS_fsm_state53, tmp_20_fu_1300_p2, ap_CS_fsm_state78, sel_div_fu_1363_p3, sel_div1_fu_1412_p3, ap_CS_fsm_state79, ap_CS_fsm_state117, tmp_80_fu_1649_p3, ap_CS_fsm_state120, tmp_35_fu_1737_p2, or_cond_fu_1764_p2, ap_CS_fsm_state121, exitcond_fu_1776_p2, tmp_2_fu_588_p2, tmp_3_fu_594_p2, tmp_4_fu_735_p2, exitcond3_fu_741_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_3_fu_594_p2 = ap_const_lv1_1) and (tmp_2_fu_588_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_2_fu_588_p2 = ap_const_lv1_1) and (tmp_3_fu_594_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_600_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((input_stream_V_data_V_0_vld_out = ap_const_logic_0) and (exitcond2_fu_642_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_642_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((input_stream_V_data_V_0_vld_out = ap_const_logic_0) and (exitcond2_fu_642_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_642_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_4_fu_735_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond3_fu_741_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_14_fu_878_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state120;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond8_fu_1106_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state53) and (tmp_20_fu_1300_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state78) and (sel_div_fu_1363_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state79;
                end if;
            when ap_ST_fsm_state79 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state79) and (sel_div1_fu_1412_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state117) and (tmp_80_fu_1649_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state120;
                else
                    ap_NS_fsm <= ap_ST_fsm_state118;
                end if;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state120) and ((tmp_14_reg_2007 = ap_const_lv1_0) or ((or_cond_fu_1764_p2 = ap_const_lv1_1) or (tmp_35_fu_1737_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state121;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state121 => 
                if ((not(((output_stream_V_dest_V_1_ack_in = ap_const_logic_0) or (output_stream_V_id_V_1_ack_in = ap_const_logic_0) or (output_stream_V_last_V_1_ack_in = ap_const_logic_0) or (output_stream_V_user_V_1_ack_in = ap_const_logic_0) or (output_stream_V_strb_V_1_ack_in = ap_const_logic_0) or (output_stream_V_keep_V_1_ack_in = ap_const_logic_0) or (output_stream_V_data_V_1_ack_in = ap_const_logic_0))) and (output_stream_V_dest_V_1_state(0) = ap_const_logic_0) and (output_stream_V_id_V_1_state(0) = ap_const_logic_0) and (output_stream_V_last_V_1_state(0) = ap_const_logic_0) and (output_stream_V_user_V_1_state(0) = ap_const_logic_0) and (output_stream_V_strb_V_1_state(0) = ap_const_logic_0) and (output_stream_V_keep_V_1_state(0) = ap_const_logic_0) and (output_stream_V_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state121) and (exitcond_fu_1776_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((output_stream_V_dest_V_1_ack_in = ap_const_logic_0) or (output_stream_V_id_V_1_ack_in = ap_const_logic_0) or (output_stream_V_last_V_1_ack_in = ap_const_logic_0) or (output_stream_V_user_V_1_ack_in = ap_const_logic_0) or (output_stream_V_strb_V_1_ack_in = ap_const_logic_0) or (output_stream_V_keep_V_1_ack_in = ap_const_logic_0) or (output_stream_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state121) and (exitcond_fu_1776_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state122;
                else
                    ap_NS_fsm <= ap_ST_fsm_state121;
                end if;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                if (((output_stream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state124))) then
                    ap_NS_fsm <= ap_ST_fsm_state125;
                else
                    ap_NS_fsm <= ap_ST_fsm_state124;
                end if;
            when ap_ST_fsm_state125 => 
                if (((output_stream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state125))) then
                    ap_NS_fsm <= ap_ST_fsm_state121;
                else
                    ap_NS_fsm <= ap_ST_fsm_state125;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Ny1_fu_1321_p0 <= temperature_load_1_reg_2142;
    Ny1_fu_1321_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(Ny1_fu_1321_p0) * signed('0' &ap_const_lv47_2711))), 47));
    Ny3_fu_1374_p0 <= temperature_load_1_reg_2142;
    Ny3_fu_1374_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(Ny3_fu_1374_p0) * signed(ap_const_lv47_7FFFFFFFD8EF))), 47));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state116 <= ap_CS_fsm(115);
    ap_CS_fsm_state117 <= ap_CS_fsm(116);
    ap_CS_fsm_state118 <= ap_CS_fsm(117);
    ap_CS_fsm_state119 <= ap_CS_fsm(118);
    ap_CS_fsm_state120 <= ap_CS_fsm(119);
    ap_CS_fsm_state121 <= ap_CS_fsm(120);
    ap_CS_fsm_state122 <= ap_CS_fsm(121);
    ap_CS_fsm_state123 <= ap_CS_fsm(122);
    ap_CS_fsm_state124 <= ap_CS_fsm(123);
    ap_CS_fsm_state125 <= ap_CS_fsm(124);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state121_assign_proc : process(output_stream_V_data_V_1_ack_in, output_stream_V_keep_V_1_ack_in, output_stream_V_strb_V_1_ack_in, output_stream_V_user_V_1_ack_in, output_stream_V_last_V_1_ack_in, output_stream_V_id_V_1_ack_in, output_stream_V_dest_V_1_ack_in)
    begin
                ap_block_state121 <= ((output_stream_V_dest_V_1_ack_in = ap_const_logic_0) or (output_stream_V_id_V_1_ack_in = ap_const_logic_0) or (output_stream_V_last_V_1_ack_in = ap_const_logic_0) or (output_stream_V_user_V_1_ack_in = ap_const_logic_0) or (output_stream_V_strb_V_1_ack_in = ap_const_logic_0) or (output_stream_V_keep_V_1_ack_in = ap_const_logic_0) or (output_stream_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state5_assign_proc : process(input_stream_V_data_V_0_vld_out, exitcond2_fu_642_p2)
    begin
                ap_block_state5 <= ((input_stream_V_data_V_0_vld_out = ap_const_logic_0) and (exitcond2_fu_642_p2 = ap_const_lv1_0));
    end process;


    ap_done_assign_proc : process(output_stream_V_data_V_1_ack_in, output_stream_V_data_V_1_state, output_stream_V_keep_V_1_ack_in, output_stream_V_keep_V_1_state, output_stream_V_strb_V_1_ack_in, output_stream_V_strb_V_1_state, output_stream_V_user_V_1_ack_in, output_stream_V_user_V_1_state, output_stream_V_last_V_1_ack_in, output_stream_V_last_V_1_state, output_stream_V_id_V_1_ack_in, output_stream_V_id_V_1_state, output_stream_V_dest_V_1_ack_in, output_stream_V_dest_V_1_state, ap_CS_fsm_state121, exitcond_fu_1776_p2)
    begin
        if ((not(((output_stream_V_dest_V_1_ack_in = ap_const_logic_0) or (output_stream_V_id_V_1_ack_in = ap_const_logic_0) or (output_stream_V_last_V_1_ack_in = ap_const_logic_0) or (output_stream_V_user_V_1_ack_in = ap_const_logic_0) or (output_stream_V_strb_V_1_ack_in = ap_const_logic_0) or (output_stream_V_keep_V_1_ack_in = ap_const_logic_0) or (output_stream_V_data_V_1_ack_in = ap_const_logic_0))) and (output_stream_V_dest_V_1_state(0) = ap_const_logic_0) and (output_stream_V_id_V_1_state(0) = ap_const_logic_0) and (output_stream_V_last_V_1_state(0) = ap_const_logic_0) and (output_stream_V_user_V_1_state(0) = ap_const_logic_0) and (output_stream_V_strb_V_1_state(0) = ap_const_logic_0) and (output_stream_V_keep_V_1_state(0) = ap_const_logic_0) and (output_stream_V_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state121) and (exitcond_fu_1776_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(output_stream_V_data_V_1_ack_in, output_stream_V_data_V_1_state, output_stream_V_keep_V_1_ack_in, output_stream_V_keep_V_1_state, output_stream_V_strb_V_1_ack_in, output_stream_V_strb_V_1_state, output_stream_V_user_V_1_ack_in, output_stream_V_user_V_1_state, output_stream_V_last_V_1_ack_in, output_stream_V_last_V_1_state, output_stream_V_id_V_1_ack_in, output_stream_V_id_V_1_state, output_stream_V_dest_V_1_ack_in, output_stream_V_dest_V_1_state, ap_CS_fsm_state121, exitcond_fu_1776_p2)
    begin
        if ((not(((output_stream_V_dest_V_1_ack_in = ap_const_logic_0) or (output_stream_V_id_V_1_ack_in = ap_const_logic_0) or (output_stream_V_last_V_1_ack_in = ap_const_logic_0) or (output_stream_V_user_V_1_ack_in = ap_const_logic_0) or (output_stream_V_strb_V_1_ack_in = ap_const_logic_0) or (output_stream_V_keep_V_1_ack_in = ap_const_logic_0) or (output_stream_V_data_V_1_ack_in = ap_const_logic_0))) and (output_stream_V_dest_V_1_state(0) = ap_const_logic_0) and (output_stream_V_id_V_1_state(0) = ap_const_logic_0) and (output_stream_V_last_V_1_state(0) = ap_const_logic_0) and (output_stream_V_user_V_1_state(0) = ap_const_logic_0) and (output_stream_V_strb_V_1_state(0) = ap_const_logic_0) and (output_stream_V_keep_V_1_state(0) = ap_const_logic_0) and (output_stream_V_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state121) and (exitcond_fu_1776_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    currentSolution_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, tmp_18_reg_2048, ap_CS_fsm_state45, exitcond8_fu_1106_p2, currentSolution_addr_2_reg_2076, ap_CS_fsm_state116, ap_CS_fsm_state121, tmp_s_fu_730_p1, tmp_13_fu_868_p1, tmp_21_fu_1118_p1, tmp_38_fu_1788_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state121)) then 
            currentSolution_address0 <= tmp_38_fu_1788_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state116)) then 
            currentSolution_address0 <= currentSolution_addr_2_reg_2076;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond8_fu_1106_p2 = ap_const_lv1_1))) then 
            currentSolution_address0 <= tmp_18_reg_2048(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond8_fu_1106_p2 = ap_const_lv1_0))) then 
            currentSolution_address0 <= tmp_21_fu_1118_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            currentSolution_address0 <= tmp_13_fu_868_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            currentSolution_address0 <= tmp_s_fu_730_p1(3 - 1 downto 0);
        else 
            currentSolution_address0 <= "XXX";
        end if; 
    end process;


    currentSolution_ce0_assign_proc : process(output_stream_V_data_V_1_ack_in, output_stream_V_keep_V_1_ack_in, output_stream_V_strb_V_1_ack_in, output_stream_V_user_V_1_ack_in, output_stream_V_last_V_1_ack_in, output_stream_V_id_V_1_ack_in, output_stream_V_dest_V_1_ack_in, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state45, exitcond8_fu_1106_p2, ap_CS_fsm_state116, ap_CS_fsm_state121)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (not(((output_stream_V_dest_V_1_ack_in = ap_const_logic_0) or (output_stream_V_id_V_1_ack_in = ap_const_logic_0) or (output_stream_V_last_V_1_ack_in = ap_const_logic_0) or (output_stream_V_user_V_1_ack_in = ap_const_logic_0) or (output_stream_V_strb_V_1_ack_in = ap_const_logic_0) or (output_stream_V_keep_V_1_ack_in = ap_const_logic_0) or (output_stream_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state121)) or ((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond8_fu_1106_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond8_fu_1106_p2 = ap_const_lv1_0)))) then 
            currentSolution_ce0 <= ap_const_logic_1;
        else 
            currentSolution_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    currentSolution_d0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state116, tmp_15_cast_cast_fu_859_p3, tmp_26_fu_1629_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state116)) then 
            currentSolution_d0 <= tmp_26_fu_1629_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            currentSolution_d0 <= tmp_15_cast_cast_fu_859_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            currentSolution_d0 <= ap_const_lv32_0;
        else 
            currentSolution_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    currentSolution_we0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state116, exitcond3_fu_741_p2, tmp_25_fu_1623_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state116) and (tmp_25_fu_1623_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond3_fu_741_p2 = ap_const_lv1_0)))) then 
            currentSolution_we0 <= ap_const_logic_1;
        else 
            currentSolution_we0 <= ap_const_logic_0;
        end if; 
    end process;

    deltaEnergy_fu_1293_p3 <= 
        tmp_50_fu_1263_p1 when (tmp_48_reg_2119(0) = '1') else 
        neg_ti1_fu_1287_p2;
    exitcond1_fu_600_p2 <= "1" when (t_V_reg_392 = ap_const_lv3_6) else "0";
    exitcond2_fu_642_p2 <= "1" when (t_V_1_reg_403 = ap_const_lv3_6) else "0";
    exitcond3_fu_741_p2 <= "1" when (p_s_reg_425 = ap_const_lv3_6) else "0";
    exitcond8_fu_1106_p2 <= "1" when (p_6_reg_459 = ap_const_lv3_6) else "0";
    exitcond_fu_1776_p2 <= "1" when (t_V_2_reg_500 = ap_const_lv3_6) else "0";
    fpga_output_V_fu_1882_p3 <= 
        neg_ti4_fu_1872_p2 when (tmp_85_reg_2279(0) = '1') else 
        tmp_89_fu_1878_p1;

    grp_fu_1066_ap_start_assign_proc : process(tmp_14_fu_878_p2, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_14_fu_878_p2 = ap_const_lv1_1))) then 
            grp_fu_1066_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1066_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1066_p0 <= (tmp_44_fu_1032_p3 & tmp_43_fu_1026_p2);
    grp_fu_1066_p1 <= ap_const_lv32_6(4 - 1 downto 0);

    grp_fu_1312_ap_start_assign_proc : process(ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_fu_1312_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1312_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1312_p0 <= deltaEnergy_reg_2131(21 - 1 downto 0);
    grp_fu_1312_p1 <= tmp_61_fu_1308_p0(21 - 1 downto 0);

    grp_fu_1609_ap_start_assign_proc : process(ap_CS_fsm_state81)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            grp_fu_1609_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1609_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1609_p0 <= (tmp_75_fu_1587_p3 & tmp_74_fu_1581_p2);
    grp_fu_1609_p1 <= ap_const_lv32_7FFF(16 - 1 downto 0);
    grp_fu_515_p4 <= reg_V(31 downto 1);
    i_V_1_fu_747_p2 <= std_logic_vector(unsigned(p_s_reg_425) + unsigned(ap_const_lv3_1));
    i_V_2_fu_1782_p2 <= std_logic_vector(unsigned(t_V_2_reg_500) + unsigned(ap_const_lv3_1));
    i_V_fu_606_p2 <= std_logic_vector(unsigned(t_V_reg_392) + unsigned(ap_const_lv3_1));
    icmp_fu_1753_p2 <= "1" when (signed(tmp_84_fu_1743_p4) < signed(ap_const_lv31_1)) else "0";
    indvarinc1_fu_568_p2 <= std_logic_vector(unsigned(invdar1_reg_381) + unsigned(ap_const_lv3_1));
    indvarinc2_fu_724_p2 <= std_logic_vector(unsigned(invdar2_reg_414) + unsigned(ap_const_lv3_1));
    indvarinc_fu_532_p2 <= std_logic_vector(unsigned(invdar_reg_369) + unsigned(ap_const_lv3_1));
    indvars_iv_next_fu_1770_p2 <= std_logic_vector(unsigned(indvars_iv_reg_436) + unsigned(ap_const_lv14_4));

    input_stream_TDATA_blk_n_assign_proc : process(input_stream_V_data_V_0_state, ap_CS_fsm_state5, exitcond2_fu_642_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_642_p2 = ap_const_lv1_0))) then 
            input_stream_TDATA_blk_n <= input_stream_V_data_V_0_state(0);
        else 
            input_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    input_stream_TREADY <= input_stream_V_dest_V_0_state(1);
    input_stream_V_data_V_0_ack_in <= input_stream_V_data_V_0_state(1);

    input_stream_V_data_V_0_ack_out_assign_proc : process(input_stream_V_data_V_0_vld_out, ap_CS_fsm_state5, exitcond2_fu_642_p2)
    begin
        if ((not(((input_stream_V_data_V_0_vld_out = ap_const_logic_0) and (exitcond2_fu_642_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_642_p2 = ap_const_lv1_0))) then 
            input_stream_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            input_stream_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    input_stream_V_data_V_0_data_out_assign_proc : process(input_stream_V_data_V_0_payload_A, input_stream_V_data_V_0_payload_B, input_stream_V_data_V_0_sel)
    begin
        if ((input_stream_V_data_V_0_sel = ap_const_logic_1)) then 
            input_stream_V_data_V_0_data_out <= input_stream_V_data_V_0_payload_B;
        else 
            input_stream_V_data_V_0_data_out <= input_stream_V_data_V_0_payload_A;
        end if; 
    end process;

    input_stream_V_data_V_0_load_A <= (input_stream_V_data_V_0_state_cmp_full and not(input_stream_V_data_V_0_sel_wr));
    input_stream_V_data_V_0_load_B <= (input_stream_V_data_V_0_state_cmp_full and input_stream_V_data_V_0_sel_wr);
    input_stream_V_data_V_0_sel <= input_stream_V_data_V_0_sel_rd;
    input_stream_V_data_V_0_state_cmp_full <= '0' when (input_stream_V_data_V_0_state = ap_const_lv2_1) else '1';
    input_stream_V_data_V_0_vld_in <= input_stream_TVALID;
    input_stream_V_data_V_0_vld_out <= input_stream_V_data_V_0_state(0);
    input_stream_V_dest_V_0_ack_in <= input_stream_V_dest_V_0_state(1);

    input_stream_V_dest_V_0_ack_out_assign_proc : process(input_stream_V_data_V_0_vld_out, ap_CS_fsm_state5, exitcond2_fu_642_p2)
    begin
        if ((not(((input_stream_V_data_V_0_vld_out = ap_const_logic_0) and (exitcond2_fu_642_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_642_p2 = ap_const_lv1_0))) then 
            input_stream_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            input_stream_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    input_stream_V_dest_V_0_data_out_assign_proc : process(input_stream_V_dest_V_0_payload_A, input_stream_V_dest_V_0_payload_B, input_stream_V_dest_V_0_sel)
    begin
        if ((input_stream_V_dest_V_0_sel = ap_const_logic_1)) then 
            input_stream_V_dest_V_0_data_out <= input_stream_V_dest_V_0_payload_B;
        else 
            input_stream_V_dest_V_0_data_out <= input_stream_V_dest_V_0_payload_A;
        end if; 
    end process;

    input_stream_V_dest_V_0_load_A <= (input_stream_V_dest_V_0_state_cmp_full and not(input_stream_V_dest_V_0_sel_wr));
    input_stream_V_dest_V_0_load_B <= (input_stream_V_dest_V_0_state_cmp_full and input_stream_V_dest_V_0_sel_wr);
    input_stream_V_dest_V_0_sel <= input_stream_V_dest_V_0_sel_rd;
    input_stream_V_dest_V_0_state_cmp_full <= '0' when (input_stream_V_dest_V_0_state = ap_const_lv2_1) else '1';
    input_stream_V_dest_V_0_vld_in <= input_stream_TVALID;
    input_stream_V_dest_V_0_vld_out <= input_stream_V_dest_V_0_state(0);
    input_stream_V_id_V_0_ack_in <= input_stream_V_id_V_0_state(1);

    input_stream_V_id_V_0_ack_out_assign_proc : process(input_stream_V_data_V_0_vld_out, ap_CS_fsm_state5, exitcond2_fu_642_p2)
    begin
        if ((not(((input_stream_V_data_V_0_vld_out = ap_const_logic_0) and (exitcond2_fu_642_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_642_p2 = ap_const_lv1_0))) then 
            input_stream_V_id_V_0_ack_out <= ap_const_logic_1;
        else 
            input_stream_V_id_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    input_stream_V_id_V_0_data_out_assign_proc : process(input_stream_V_id_V_0_payload_A, input_stream_V_id_V_0_payload_B, input_stream_V_id_V_0_sel)
    begin
        if ((input_stream_V_id_V_0_sel = ap_const_logic_1)) then 
            input_stream_V_id_V_0_data_out <= input_stream_V_id_V_0_payload_B;
        else 
            input_stream_V_id_V_0_data_out <= input_stream_V_id_V_0_payload_A;
        end if; 
    end process;

    input_stream_V_id_V_0_load_A <= (input_stream_V_id_V_0_state_cmp_full and not(input_stream_V_id_V_0_sel_wr));
    input_stream_V_id_V_0_load_B <= (input_stream_V_id_V_0_state_cmp_full and input_stream_V_id_V_0_sel_wr);
    input_stream_V_id_V_0_sel <= input_stream_V_id_V_0_sel_rd;
    input_stream_V_id_V_0_state_cmp_full <= '0' when (input_stream_V_id_V_0_state = ap_const_lv2_1) else '1';
    input_stream_V_id_V_0_vld_in <= input_stream_TVALID;
    input_stream_V_id_V_0_vld_out <= input_stream_V_id_V_0_state(0);
    input_stream_V_keep_V_0_ack_in <= input_stream_V_keep_V_0_state(1);

    input_stream_V_keep_V_0_ack_out_assign_proc : process(input_stream_V_data_V_0_vld_out, ap_CS_fsm_state5, exitcond2_fu_642_p2)
    begin
        if ((not(((input_stream_V_data_V_0_vld_out = ap_const_logic_0) and (exitcond2_fu_642_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_642_p2 = ap_const_lv1_0))) then 
            input_stream_V_keep_V_0_ack_out <= ap_const_logic_1;
        else 
            input_stream_V_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    input_stream_V_keep_V_0_data_out_assign_proc : process(input_stream_V_keep_V_0_payload_A, input_stream_V_keep_V_0_payload_B, input_stream_V_keep_V_0_sel)
    begin
        if ((input_stream_V_keep_V_0_sel = ap_const_logic_1)) then 
            input_stream_V_keep_V_0_data_out <= input_stream_V_keep_V_0_payload_B;
        else 
            input_stream_V_keep_V_0_data_out <= input_stream_V_keep_V_0_payload_A;
        end if; 
    end process;

    input_stream_V_keep_V_0_load_A <= (input_stream_V_keep_V_0_state_cmp_full and not(input_stream_V_keep_V_0_sel_wr));
    input_stream_V_keep_V_0_load_B <= (input_stream_V_keep_V_0_state_cmp_full and input_stream_V_keep_V_0_sel_wr);
    input_stream_V_keep_V_0_sel <= input_stream_V_keep_V_0_sel_rd;
    input_stream_V_keep_V_0_state_cmp_full <= '0' when (input_stream_V_keep_V_0_state = ap_const_lv2_1) else '1';
    input_stream_V_keep_V_0_vld_in <= input_stream_TVALID;
    input_stream_V_keep_V_0_vld_out <= input_stream_V_keep_V_0_state(0);
    input_stream_V_strb_V_0_ack_in <= input_stream_V_strb_V_0_state(1);

    input_stream_V_strb_V_0_ack_out_assign_proc : process(input_stream_V_data_V_0_vld_out, ap_CS_fsm_state5, exitcond2_fu_642_p2)
    begin
        if ((not(((input_stream_V_data_V_0_vld_out = ap_const_logic_0) and (exitcond2_fu_642_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_642_p2 = ap_const_lv1_0))) then 
            input_stream_V_strb_V_0_ack_out <= ap_const_logic_1;
        else 
            input_stream_V_strb_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    input_stream_V_strb_V_0_data_out_assign_proc : process(input_stream_V_strb_V_0_payload_A, input_stream_V_strb_V_0_payload_B, input_stream_V_strb_V_0_sel)
    begin
        if ((input_stream_V_strb_V_0_sel = ap_const_logic_1)) then 
            input_stream_V_strb_V_0_data_out <= input_stream_V_strb_V_0_payload_B;
        else 
            input_stream_V_strb_V_0_data_out <= input_stream_V_strb_V_0_payload_A;
        end if; 
    end process;

    input_stream_V_strb_V_0_load_A <= (input_stream_V_strb_V_0_state_cmp_full and not(input_stream_V_strb_V_0_sel_wr));
    input_stream_V_strb_V_0_load_B <= (input_stream_V_strb_V_0_state_cmp_full and input_stream_V_strb_V_0_sel_wr);
    input_stream_V_strb_V_0_sel <= input_stream_V_strb_V_0_sel_rd;
    input_stream_V_strb_V_0_state_cmp_full <= '0' when (input_stream_V_strb_V_0_state = ap_const_lv2_1) else '1';
    input_stream_V_strb_V_0_vld_in <= input_stream_TVALID;
    input_stream_V_strb_V_0_vld_out <= input_stream_V_strb_V_0_state(0);
    input_stream_V_user_V_0_ack_in <= input_stream_V_user_V_0_state(1);

    input_stream_V_user_V_0_ack_out_assign_proc : process(input_stream_V_data_V_0_vld_out, ap_CS_fsm_state5, exitcond2_fu_642_p2)
    begin
        if ((not(((input_stream_V_data_V_0_vld_out = ap_const_logic_0) and (exitcond2_fu_642_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_642_p2 = ap_const_lv1_0))) then 
            input_stream_V_user_V_0_ack_out <= ap_const_logic_1;
        else 
            input_stream_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    input_stream_V_user_V_0_data_out_assign_proc : process(input_stream_V_user_V_0_payload_A, input_stream_V_user_V_0_payload_B, input_stream_V_user_V_0_sel)
    begin
        if ((input_stream_V_user_V_0_sel = ap_const_logic_1)) then 
            input_stream_V_user_V_0_data_out <= input_stream_V_user_V_0_payload_B;
        else 
            input_stream_V_user_V_0_data_out <= input_stream_V_user_V_0_payload_A;
        end if; 
    end process;

    input_stream_V_user_V_0_load_A <= (input_stream_V_user_V_0_state_cmp_full and not(input_stream_V_user_V_0_sel_wr));
    input_stream_V_user_V_0_load_B <= (input_stream_V_user_V_0_state_cmp_full and input_stream_V_user_V_0_sel_wr);
    input_stream_V_user_V_0_sel <= input_stream_V_user_V_0_sel_rd;
    input_stream_V_user_V_0_state_cmp_full <= '0' when (input_stream_V_user_V_0_state = ap_const_lv2_1) else '1';
    input_stream_V_user_V_0_vld_in <= input_stream_TVALID;
    input_stream_V_user_V_0_vld_out <= input_stream_V_user_V_0_state(0);
    iterate_V_fu_884_p2 <= std_logic_vector(unsigned(p_4_reg_448) + unsigned(ap_const_lv12_1));
    j_V_1_fu_1112_p2 <= std_logic_vector(unsigned(p_6_reg_459) + unsigned(ap_const_lv3_1));
    j_V_fu_648_p2 <= std_logic_vector(unsigned(t_V_1_reg_403) + unsigned(ap_const_lv3_1));
    localFieldVal_1_fu_1215_p2 <= std_logic_vector(unsigned(tmp_59_fu_1208_p3) + unsigned(localFieldVal_reg_470));

    matrix_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state45, ap_CS_fsm_state6, tmp_27_cast_fu_583_p1, tmp_40_cast_fu_716_p1, tmp_58_cast_fu_1132_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            matrix_address0 <= tmp_58_cast_fu_1132_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            matrix_address0 <= tmp_40_cast_fu_716_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            matrix_address0 <= tmp_27_cast_fu_583_p1(6 - 1 downto 0);
        else 
            matrix_address0 <= "XXXXXX";
        end if; 
    end process;


    matrix_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state45, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            matrix_ce0 <= ap_const_logic_1;
        else 
            matrix_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matrix_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, tmp_12_cast_cast_fu_720_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            matrix_d0 <= tmp_12_cast_cast_fu_720_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            matrix_d0 <= ap_const_lv24_0;
        else 
            matrix_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    matrix_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            matrix_we0 <= ap_const_logic_1;
        else 
            matrix_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mul1_fu_1423_p0 <= x_assign_reg_2166(21 - 1 downto 0);
    mul1_fu_1423_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul1_fu_1423_p0) * signed('0' &ap_const_lv47_19999999A))), 47));
    mul2_fu_1643_p0 <= mul2_fu_1643_p00(24 - 1 downto 0);
    mul2_fu_1643_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_cast_reg_2221),50));
    mul2_fu_1643_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul2_fu_1643_p0) * unsigned(ap_const_lv50_1A36E2F), 50));
    mul3_fu_1674_p0 <= tmp_33_reg_2229;
    mul3_fu_1674_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul3_fu_1674_p0) * signed('0' &ap_const_lv65_14F8B588F))), 65));
    mul4_fu_1811_p1 <= reg_528;
    mul4_fu_1811_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv65_1A36E2EB2) * signed(mul4_fu_1811_p1))), 65));
    mul7_fu_1242_p0 <= tmp_19_reg_2112;
    mul7_fu_1242_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul7_fu_1242_p0) * signed('0' &ap_const_lv65_1A36E2EB2))), 65));
    mul_fu_1157_p0 <= tmp_22_reg_2086;
    mul_fu_1157_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_fu_1157_p0) * signed('0' &ap_const_lv65_1A36E2EB2))), 65));
    neg_mul1_fu_1446_p2 <= std_logic_vector(unsigned(ap_const_lv47_0) - unsigned(mul1_reg_2186));
    neg_mul2_fu_1690_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul3_reg_2240));
    neg_mul3_fu_1847_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul4_reg_2285));
    neg_mul8_fu_1248_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul7_reg_2125));
    neg_mul_fu_1173_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_reg_2097));
    neg_ti1_fu_1287_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_53_fu_1280_p3));
    neg_ti2_fu_1470_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(trunc1_fu_1467_p1));
    neg_ti3_fu_1719_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_79_fu_1712_p3));
    neg_ti4_fu_1872_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_88_fu_1868_p1));
    neg_ti_fu_1198_p2 <= std_logic_vector(unsigned(ap_const_lv22_0) - unsigned(trunc_fu_1194_p1));
    or_cond_fu_1764_p2 <= (tmp_37_fu_1759_p2 and icmp_fu_1753_p2);
    output_last_V_fu_1793_p2 <= "1" when (t_V_2_reg_500 = ap_const_lv3_5) else "0";
    output_stream_TDATA <= output_stream_V_data_V_1_data_out;

    output_stream_TDATA_blk_n_assign_proc : process(output_stream_V_data_V_1_state, ap_CS_fsm_state124, ap_CS_fsm_state125)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state125) or (ap_const_logic_1 = ap_CS_fsm_state124))) then 
            output_stream_TDATA_blk_n <= output_stream_V_data_V_1_state(1);
        else 
            output_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_stream_TDEST <= output_stream_V_dest_V_1_data_out;
    output_stream_TID <= output_stream_V_id_V_1_data_out;
    output_stream_TKEEP <= output_stream_V_keep_V_1_data_out;
    output_stream_TLAST <= output_stream_V_last_V_1_data_out;
    output_stream_TSTRB <= output_stream_V_strb_V_1_data_out;
    output_stream_TUSER <= output_stream_V_user_V_1_data_out;
    output_stream_TVALID <= output_stream_V_dest_V_1_state(0);
    output_stream_V_data_V_1_ack_in <= output_stream_V_data_V_1_state(1);
    output_stream_V_data_V_1_ack_out <= output_stream_TREADY;

    output_stream_V_data_V_1_data_out_assign_proc : process(output_stream_V_data_V_1_payload_A, output_stream_V_data_V_1_payload_B, output_stream_V_data_V_1_sel)
    begin
        if ((output_stream_V_data_V_1_sel = ap_const_logic_1)) then 
            output_stream_V_data_V_1_data_out <= output_stream_V_data_V_1_payload_B;
        else 
            output_stream_V_data_V_1_data_out <= output_stream_V_data_V_1_payload_A;
        end if; 
    end process;

    output_stream_V_data_V_1_load_A <= (output_stream_V_data_V_1_state_cmp_full and not(output_stream_V_data_V_1_sel_wr));
    output_stream_V_data_V_1_load_B <= (output_stream_V_data_V_1_state_cmp_full and output_stream_V_data_V_1_sel_wr);
    output_stream_V_data_V_1_sel <= output_stream_V_data_V_1_sel_rd;
    output_stream_V_data_V_1_state_cmp_full <= '0' when (output_stream_V_data_V_1_state = ap_const_lv2_1) else '1';

    output_stream_V_data_V_1_vld_in_assign_proc : process(output_stream_V_data_V_1_ack_in, ap_CS_fsm_state124)
    begin
        if (((output_stream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state124))) then 
            output_stream_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            output_stream_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_stream_V_data_V_1_vld_out <= output_stream_V_data_V_1_state(0);
    output_stream_V_dest_V_1_ack_in <= output_stream_V_dest_V_1_state(1);
    output_stream_V_dest_V_1_ack_out <= output_stream_TREADY;

    output_stream_V_dest_V_1_data_out_assign_proc : process(output_stream_V_dest_V_1_payload_A, output_stream_V_dest_V_1_payload_B, output_stream_V_dest_V_1_sel)
    begin
        if ((output_stream_V_dest_V_1_sel = ap_const_logic_1)) then 
            output_stream_V_dest_V_1_data_out <= output_stream_V_dest_V_1_payload_B;
        else 
            output_stream_V_dest_V_1_data_out <= output_stream_V_dest_V_1_payload_A;
        end if; 
    end process;

    output_stream_V_dest_V_1_load_A <= (output_stream_V_dest_V_1_state_cmp_full and not(output_stream_V_dest_V_1_sel_wr));
    output_stream_V_dest_V_1_load_B <= (output_stream_V_dest_V_1_state_cmp_full and output_stream_V_dest_V_1_sel_wr);
    output_stream_V_dest_V_1_sel <= output_stream_V_dest_V_1_sel_rd;
    output_stream_V_dest_V_1_state_cmp_full <= '0' when (output_stream_V_dest_V_1_state = ap_const_lv2_1) else '1';

    output_stream_V_dest_V_1_vld_in_assign_proc : process(output_stream_V_data_V_1_ack_in, ap_CS_fsm_state124)
    begin
        if (((output_stream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state124))) then 
            output_stream_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            output_stream_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_stream_V_dest_V_1_vld_out <= output_stream_V_dest_V_1_state(0);
    output_stream_V_id_V_1_ack_in <= output_stream_V_id_V_1_state(1);
    output_stream_V_id_V_1_ack_out <= output_stream_TREADY;

    output_stream_V_id_V_1_data_out_assign_proc : process(output_stream_V_id_V_1_payload_A, output_stream_V_id_V_1_payload_B, output_stream_V_id_V_1_sel)
    begin
        if ((output_stream_V_id_V_1_sel = ap_const_logic_1)) then 
            output_stream_V_id_V_1_data_out <= output_stream_V_id_V_1_payload_B;
        else 
            output_stream_V_id_V_1_data_out <= output_stream_V_id_V_1_payload_A;
        end if; 
    end process;

    output_stream_V_id_V_1_load_A <= (output_stream_V_id_V_1_state_cmp_full and not(output_stream_V_id_V_1_sel_wr));
    output_stream_V_id_V_1_load_B <= (output_stream_V_id_V_1_state_cmp_full and output_stream_V_id_V_1_sel_wr);
    output_stream_V_id_V_1_sel <= output_stream_V_id_V_1_sel_rd;
    output_stream_V_id_V_1_state_cmp_full <= '0' when (output_stream_V_id_V_1_state = ap_const_lv2_1) else '1';

    output_stream_V_id_V_1_vld_in_assign_proc : process(output_stream_V_data_V_1_ack_in, ap_CS_fsm_state124)
    begin
        if (((output_stream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state124))) then 
            output_stream_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            output_stream_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_stream_V_id_V_1_vld_out <= output_stream_V_id_V_1_state(0);
    output_stream_V_keep_V_1_ack_in <= output_stream_V_keep_V_1_state(1);
    output_stream_V_keep_V_1_ack_out <= output_stream_TREADY;

    output_stream_V_keep_V_1_data_out_assign_proc : process(output_stream_V_keep_V_1_payload_A, output_stream_V_keep_V_1_payload_B, output_stream_V_keep_V_1_sel)
    begin
        if ((output_stream_V_keep_V_1_sel = ap_const_logic_1)) then 
            output_stream_V_keep_V_1_data_out <= output_stream_V_keep_V_1_payload_B;
        else 
            output_stream_V_keep_V_1_data_out <= output_stream_V_keep_V_1_payload_A;
        end if; 
    end process;

    output_stream_V_keep_V_1_load_A <= (output_stream_V_keep_V_1_state_cmp_full and not(output_stream_V_keep_V_1_sel_wr));
    output_stream_V_keep_V_1_load_B <= (output_stream_V_keep_V_1_state_cmp_full and output_stream_V_keep_V_1_sel_wr);
    output_stream_V_keep_V_1_sel <= output_stream_V_keep_V_1_sel_rd;
    output_stream_V_keep_V_1_state_cmp_full <= '0' when (output_stream_V_keep_V_1_state = ap_const_lv2_1) else '1';

    output_stream_V_keep_V_1_vld_in_assign_proc : process(output_stream_V_data_V_1_ack_in, ap_CS_fsm_state124)
    begin
        if (((output_stream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state124))) then 
            output_stream_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            output_stream_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_stream_V_keep_V_1_vld_out <= output_stream_V_keep_V_1_state(0);
    output_stream_V_last_V_1_ack_in <= output_stream_V_last_V_1_state(1);
    output_stream_V_last_V_1_ack_out <= output_stream_TREADY;

    output_stream_V_last_V_1_data_out_assign_proc : process(output_stream_V_last_V_1_payload_A, output_stream_V_last_V_1_payload_B, output_stream_V_last_V_1_sel)
    begin
        if ((output_stream_V_last_V_1_sel = ap_const_logic_1)) then 
            output_stream_V_last_V_1_data_out <= output_stream_V_last_V_1_payload_B;
        else 
            output_stream_V_last_V_1_data_out <= output_stream_V_last_V_1_payload_A;
        end if; 
    end process;

    output_stream_V_last_V_1_load_A <= (output_stream_V_last_V_1_state_cmp_full and not(output_stream_V_last_V_1_sel_wr));
    output_stream_V_last_V_1_load_B <= (output_stream_V_last_V_1_state_cmp_full and output_stream_V_last_V_1_sel_wr);
    output_stream_V_last_V_1_sel <= output_stream_V_last_V_1_sel_rd;
    output_stream_V_last_V_1_state_cmp_full <= '0' when (output_stream_V_last_V_1_state = ap_const_lv2_1) else '1';

    output_stream_V_last_V_1_vld_in_assign_proc : process(output_stream_V_data_V_1_ack_in, ap_CS_fsm_state124)
    begin
        if (((output_stream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state124))) then 
            output_stream_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            output_stream_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_stream_V_last_V_1_vld_out <= output_stream_V_last_V_1_state(0);
    output_stream_V_strb_V_1_ack_in <= output_stream_V_strb_V_1_state(1);
    output_stream_V_strb_V_1_ack_out <= output_stream_TREADY;

    output_stream_V_strb_V_1_data_out_assign_proc : process(output_stream_V_strb_V_1_payload_A, output_stream_V_strb_V_1_payload_B, output_stream_V_strb_V_1_sel)
    begin
        if ((output_stream_V_strb_V_1_sel = ap_const_logic_1)) then 
            output_stream_V_strb_V_1_data_out <= output_stream_V_strb_V_1_payload_B;
        else 
            output_stream_V_strb_V_1_data_out <= output_stream_V_strb_V_1_payload_A;
        end if; 
    end process;

    output_stream_V_strb_V_1_load_A <= (output_stream_V_strb_V_1_state_cmp_full and not(output_stream_V_strb_V_1_sel_wr));
    output_stream_V_strb_V_1_load_B <= (output_stream_V_strb_V_1_state_cmp_full and output_stream_V_strb_V_1_sel_wr);
    output_stream_V_strb_V_1_sel <= output_stream_V_strb_V_1_sel_rd;
    output_stream_V_strb_V_1_state_cmp_full <= '0' when (output_stream_V_strb_V_1_state = ap_const_lv2_1) else '1';

    output_stream_V_strb_V_1_vld_in_assign_proc : process(output_stream_V_data_V_1_ack_in, ap_CS_fsm_state124)
    begin
        if (((output_stream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state124))) then 
            output_stream_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            output_stream_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_stream_V_strb_V_1_vld_out <= output_stream_V_strb_V_1_state(0);
    output_stream_V_user_V_1_ack_in <= output_stream_V_user_V_1_state(1);
    output_stream_V_user_V_1_ack_out <= output_stream_TREADY;

    output_stream_V_user_V_1_data_out_assign_proc : process(output_stream_V_user_V_1_payload_A, output_stream_V_user_V_1_payload_B, output_stream_V_user_V_1_sel)
    begin
        if ((output_stream_V_user_V_1_sel = ap_const_logic_1)) then 
            output_stream_V_user_V_1_data_out <= output_stream_V_user_V_1_payload_B;
        else 
            output_stream_V_user_V_1_data_out <= output_stream_V_user_V_1_payload_A;
        end if; 
    end process;

    output_stream_V_user_V_1_load_A <= (output_stream_V_user_V_1_state_cmp_full and not(output_stream_V_user_V_1_sel_wr));
    output_stream_V_user_V_1_load_B <= (output_stream_V_user_V_1_state_cmp_full and output_stream_V_user_V_1_sel_wr);
    output_stream_V_user_V_1_sel <= output_stream_V_user_V_1_sel_rd;
    output_stream_V_user_V_1_state_cmp_full <= '0' when (output_stream_V_user_V_1_state = ap_const_lv2_1) else '1';

    output_stream_V_user_V_1_vld_in_assign_proc : process(output_stream_V_data_V_1_ack_in, ap_CS_fsm_state124)
    begin
        if (((output_stream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state124))) then 
            output_stream_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            output_stream_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_stream_V_user_V_1_vld_out <= output_stream_V_user_V_1_state(0);
    p_shl1_cast_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_550_p3),7));
    p_shl2_cast_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_612_p3),7));
    p_shl3_cast_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_624_p3),7));
    p_shl4_cast_fu_1080_p3 <= (tmp_45_fu_1076_p1 & ap_const_lv3_0);
    p_shl5_cast_fu_1092_p3 <= (tmp_46_fu_1088_p1 & ap_const_lv1_0);
    p_shl_cast_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_538_p3),7));
    p_v1_v_fu_1188_p3 <= 
        tmp_56_fu_1178_p4 when (tmp_55_reg_2091(0) = '1') else 
        tmp_57_reg_2102;
    p_v2_v_fu_1461_p3 <= 
        tmp_66_fu_1451_p4 when (tmp_65_reg_2191(0) = '1') else 
        tmp_67_reg_2197;
    p_v_v_fu_1862_p3 <= 
        tmp_86_fu_1852_p4 when (tmp_85_reg_2279(0) = '1') else 
        tmp_87_reg_2290;
    prob_cast_fu_1615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(prob_reg_482),16));
    r_V_2_fu_1544_p3 <= (tmp_44_reg_2022 & tmp_71_fu_1535_p4);
    ret_V_1_fu_845_p3 <= (tmp_30_fu_837_p3 & tmp_28_fu_831_p2);
    ret_V_4_cast1_fu_1048_p2 <= (tmp_31_fu_1010_p3 or tmp_29_fu_996_p4);
    ret_V_4_cast9_fu_1054_p2 <= (tmp_24_fu_988_p3 or tmp_17_fu_974_p4);
    ret_V_4_cast_fu_1060_p2 <= (tmp_16_fu_966_p3 or tmp_15_fu_952_p4);
    ret_V_4_fu_1595_p3 <= (tmp_75_fu_1587_p3 & tmp_74_fu_1581_p2);
    ret_V_i1_fu_942_p2 <= (tmp4_fu_936_p2 xor tmp3_fu_930_p2);
    ret_V_i2_fu_1563_p2 <= (tmp6_fu_1557_p2 xor tmp5_fu_1551_p2);
    ret_V_i_fu_813_p2 <= (tmp2_fu_807_p2 xor tmp1_fu_801_p2);
    rev1_fu_1357_p2 <= (slt1_fu_1352_p2 xor ap_const_lv1_1);
    rev2_fu_1395_p2 <= (slt2_fu_1390_p2 xor ap_const_lv1_1);
    rev3_fu_1406_p2 <= (slt3_fu_1401_p2 xor ap_const_lv1_1);
    rev_fu_1346_p2 <= (slt_fu_1341_p2 xor ap_const_lv1_1);
    sel_div1_fu_1412_p3 <= 
        rev2_fu_1395_p2 when (tmp_64_fu_1380_p3(0) = '1') else 
        rev3_fu_1406_p2;
    sel_div_fu_1363_p3 <= 
        rev_fu_1346_p2 when (tmp_63_fu_1331_p3(0) = '1') else 
        rev1_fu_1357_p2;
    slt1_fu_1352_p2 <= "1" when (signed(x_fu_1338_p1) < signed(Ny1_reg_2160)) else "0";
    slt2_fu_1390_p2 <= "1" when (signed(x1_fu_1387_p1) < signed(Ny3_reg_2176)) else "0";
    slt3_fu_1401_p2 <= "1" when (signed(Ny3_reg_2176) < signed(x1_fu_1387_p1)) else "0";
    slt_fu_1341_p2 <= "1" when (signed(Ny1_reg_2160) < signed(x_fu_1338_p1)) else "0";
    tmp1_fu_801_p2 <= (tmp_i_fu_753_p4 xor tmp_44_i_fu_763_p4);
    tmp2_fu_807_p2 <= (tmp_47_i_fu_783_p4 xor tmp_45_i_fu_773_p4);
    tmp3_fu_930_p2 <= (tmp_i1_fu_890_p4 xor tmp_44_i1_fu_900_p4);
    tmp4_fu_936_p2 <= (tmp_47_i1_fu_920_p4 xor tmp_45_i1_fu_910_p4);
    tmp5_fu_1551_p2 <= (tmp_i3_fu_1492_p4 xor tmp_44_i2_fu_1501_p4);
    tmp6_fu_1557_p2 <= (tmp_47_i2_fu_1526_p4 xor tmp_45_i2_fu_1519_p3);
    tmp_10_fu_1890_p1 <= ap_const_lv23_2710(15 - 1 downto 0);
    tmp_11_fu_686_p2 <= std_logic_vector(unsigned(tmp_8_reg_1961) + unsigned(tmp_12_cast_fu_682_p1));
        tmp_12_cast_cast_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_reg_1974),24));

    tmp_12_cast_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_1_reg_403),7));
    tmp_12_fu_793_p3 <= reg_V(1 downto 1);
    tmp_13_fu_868_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_s_reg_425),64));
    tmp_14_fu_878_p2 <= "1" when (unsigned(p_4_reg_448) < unsigned(ap_const_lv12_9C4)) else "0";
    tmp_15_cast_cast_fu_859_p3 <= 
        ap_const_lv32_2710 when (tmp_12_fu_793_p3(0) = '1') else 
        ap_const_lv32_FFFFD8F0;
    tmp_15_fu_952_p4 <= reg_V(30 downto 1);
    tmp_16_fu_966_p3 <= (tmp_39_fu_962_p1 & ap_const_lv15_0);
    tmp_17_fu_974_p4 <= reg_V(29 downto 1);
        tmp_18_fu_1072_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1066_p2),64));

    tmp_19_fu_1225_p1 <= localFieldVal_reg_470;
    tmp_19_fu_1225_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_528) * signed(tmp_19_fu_1225_p1))), 32));
    tmp_1_cast_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar1_reg_381),7));
    tmp_1_fu_562_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_546_p1) - unsigned(p_shl1_cast_fu_558_p1));
    tmp_20_fu_1300_p2 <= "1" when (signed(tmp_19_reg_2112) > signed(ap_const_lv32_FFFFD8F0)) else "0";
    tmp_21_cast_fu_1123_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_6_reg_459),7));
    tmp_21_fu_1118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_6_reg_459),64));
    tmp_22_fu_1140_p0 <= matrix_load_reg_2081;
    tmp_22_fu_1140_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_22_fu_1140_p0) * signed(reg_528))), 32));
    tmp_23_fu_819_p1 <= ret_V_i_fu_813_p2(16 - 1 downto 0);
    tmp_24_fu_988_p3 <= (tmp_40_fu_984_p1 & ap_const_lv15_0);
    tmp_25_fu_1623_p2 <= "1" when (unsigned(tmp_76_fu_1619_p1) > unsigned(prob_cast_fu_1615_p1)) else "0";
    tmp_26_fu_1629_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(reg_528));
        tmp_27_cast_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_578_p2),64));

    tmp_27_fu_823_p3 <= (tmp_23_fu_819_p1 & ap_const_lv15_0);
    tmp_28_fu_831_p2 <= (tmp_27_fu_823_p3 or grp_fu_515_p4);
    tmp_29_cast_fu_1896_p0 <= tmp_29_cast_fu_1896_p00(14 - 1 downto 0);
    tmp_29_cast_fu_1896_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_reg_436),24));
    tmp_29_cast_fu_1896_p1 <= ap_const_lv24_3E8(11 - 1 downto 0);
    tmp_29_fu_996_p4 <= reg_V(27 downto 1);
    tmp_2_fu_588_p2 <= "1" when (invdar1_reg_381 = ap_const_lv3_5) else "0";
    tmp_30_fu_837_p3 <= ret_V_i_fu_813_p2(16 downto 16);
    tmp_31_fu_1010_p3 <= (tmp_41_fu_1006_p1 & ap_const_lv15_0);
    tmp_33_fu_1657_p0 <= temperature_fu_254;
    tmp_33_fu_1657_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_33_fu_1657_p0) * signed('0' &ap_const_lv32_1869F))), 32));
    tmp_34_fu_1725_p3 <= 
        neg_ti3_fu_1719_p2 when (tmp_81_reg_2234(0) = '1') else 
        tmp_78_fu_1709_p1;
    tmp_35_fu_1737_p2 <= "1" when (temperature_fu_254 = ap_const_lv32_0) else "0";
    tmp_36_fu_948_p1 <= ret_V_i1_fu_942_p2(16 - 1 downto 0);
    tmp_37_fu_1759_p2 <= "1" when (signed(tmp_19_reg_2112) > signed(ap_const_lv32_FF674270)) else "0";
    tmp_38_fu_1788_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_2_reg_500),64));
    tmp_39_fu_962_p1 <= ret_V_i1_fu_942_p2(15 - 1 downto 0);
    tmp_3_fu_594_p2 <= "1" when (invdar_reg_369 = ap_const_lv3_5) else "0";
        tmp_40_cast_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_11_reg_1979),64));

    tmp_40_fu_984_p1 <= ret_V_i1_fu_942_p2(14 - 1 downto 0);
    tmp_41_fu_1006_p1 <= ret_V_i1_fu_942_p2(12 - 1 downto 0);
    tmp_42_fu_1018_p3 <= (tmp_36_fu_948_p1 & ap_const_lv15_0);
    tmp_43_fu_1026_p2 <= (tmp_42_fu_1018_p3 or grp_fu_515_p4);
    tmp_43_i_fu_1486_p2 <= std_logic_vector(signed(ap_const_lv14_2710) - signed(tmp_69_fu_1479_p3));
    tmp_44_fu_1032_p3 <= ret_V_i1_fu_942_p2(16 downto 16);
    tmp_44_i1_fu_900_p4 <= reg_V(28 downto 12);
    tmp_44_i2_fu_1501_p4 <= ret_V_4_cast9_reg_2038(28 downto 12);
    tmp_44_i_fu_763_p4 <= reg_V(28 downto 12);
    tmp_45_fu_1076_p1 <= grp_fu_1066_p2(4 - 1 downto 0);
    tmp_45_i1_fu_910_p4 <= reg_V(31 downto 15);
    tmp_45_i2_fu_1519_p3 <= (tmp_44_reg_2022 & tmp_70_fu_1510_p4);
    tmp_45_i_fu_773_p4 <= reg_V(31 downto 15);
    tmp_46_fu_1088_p1 <= grp_fu_1066_p2(6 - 1 downto 0);
    tmp_47_fu_1100_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_1080_p3) - unsigned(p_shl5_cast_fu_1092_p3));
    tmp_47_i1_fu_920_p4 <= reg_V(29 downto 13);
    tmp_47_i2_fu_1526_p4 <= ret_V_4_cast_reg_2043(29 downto 13);
    tmp_47_i_fu_783_p4 <= reg_V(29 downto 13);
    tmp_49_fu_1253_p4 <= neg_mul8_fu_1248_p2(64 downto 46);
    tmp_4_fu_735_p2 <= "1" when (invdar2_reg_414 = ap_const_lv3_5) else "0";
        tmp_50_fu_1263_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_49_fu_1253_p4),32));

    tmp_51_fu_1267_p4 <= mul7_reg_2125(64 downto 46);
        tmp_52_fu_1276_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_51_fu_1267_p4),32));

    tmp_53_fu_1280_p3 <= 
        tmp_50_fu_1263_p1 when (tmp_48_reg_2119(0) = '1') else 
        tmp_52_fu_1276_p1;
    tmp_54_fu_1127_p2 <= std_logic_vector(unsigned(tmp_21_cast_fu_1123_p1) + unsigned(tmp_47_reg_2053));
    tmp_56_fu_1178_p4 <= neg_mul_fu_1173_p2(64 downto 46);
        tmp_58_cast_fu_1132_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_54_fu_1127_p2),64));

        tmp_58_fu_1204_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_v1_v_fu_1188_p3),22));

    tmp_59_fu_1208_p3 <= 
        neg_ti_fu_1198_p2 when (tmp_55_reg_2091(0) = '1') else 
        tmp_58_fu_1204_p1;
    tmp_5_fu_578_p2 <= std_logic_vector(unsigned(tmp_1_reg_1907) + unsigned(tmp_1_cast_fu_574_p1));
    tmp_61_fu_1308_p0 <= temperature_fu_254;
    tmp_63_fu_1331_p3 <= temperature_load_1_reg_2142(31 downto 31);
    tmp_64_fu_1380_p3 <= temperature_load_1_reg_2142(31 downto 31);
    tmp_66_fu_1451_p4 <= neg_mul1_fu_1446_p2(46 downto 36);
        tmp_68_fu_1476_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_v2_v_reg_2202),14));

    tmp_69_fu_1479_p3 <= 
        neg_ti2_fu_1470_p2 when (tmp_65_reg_2191(0) = '1') else 
        tmp_68_fu_1476_p1;
    tmp_6_fu_612_p3 <= (t_V_reg_392 & ap_const_lv3_0);
    tmp_70_fu_1510_p4 <= tmp_43_reg_2016(30 downto 15);
    tmp_71_fu_1535_p4 <= tmp_43_reg_2016(30 downto 1);
    tmp_72_fu_1569_p1 <= ret_V_i2_fu_1563_p2(16 - 1 downto 0);
    tmp_73_fu_1573_p3 <= (tmp_72_fu_1569_p1 & ap_const_lv15_0);
    tmp_74_fu_1581_p2 <= (tmp_73_fu_1573_p3 or r_V_2_fu_1544_p3);
    tmp_75_fu_1587_p3 <= ret_V_i2_fu_1563_p2(16 downto 16);
    tmp_76_fu_1619_p1 <= grp_fu_1609_p2(16 - 1 downto 0);
        tmp_77_fu_1705_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_82_fu_1695_p4),32));

        tmp_78_fu_1709_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_83_reg_2245),32));

    tmp_79_fu_1712_p3 <= 
        tmp_77_fu_1705_p1 when (tmp_81_reg_2234(0) = '1') else 
        tmp_78_fu_1709_p1;
    tmp_7_fu_624_p3 <= (t_V_reg_392 & ap_const_lv1_0);
    tmp_80_fu_1649_p3 <= mul2_fu_1643_p2(38 downto 38);
    tmp_82_fu_1695_p4 <= neg_mul2_fu_1690_p2(64 downto 49);
    tmp_84_fu_1743_p4 <= temperature_fu_254(31 downto 1);
    tmp_85_fu_1799_p1 <= currentSolution_q0;
    tmp_86_fu_1852_p4 <= neg_mul3_fu_1847_p2(64 downto 46);
    tmp_88_fu_1868_p1 <= p_v_v_fu_1862_p3(8 - 1 downto 0);
    tmp_89_fu_1878_p1 <= p_v_v_fu_1862_p3(8 - 1 downto 0);
    tmp_8_fu_636_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_620_p1) - unsigned(p_shl3_cast_fu_632_p1));
    tmp_9_fu_550_p3 <= (invdar_reg_369 & ap_const_lv1_0);
    tmp_fu_538_p3 <= (invdar_reg_369 & ap_const_lv3_0);
    tmp_i1_fu_890_p4 <= reg_V(26 downto 10);
    tmp_i3_fu_1492_p4 <= ret_V_4_cast1_reg_2033(26 downto 10);
    tmp_i_fu_753_p4 <= reg_V(26 downto 10);
    tmp_s_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar2_reg_414),64));
        trunc1_fu_1467_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_v2_v_reg_2202),14));

        trunc_fu_1194_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_v1_v_fu_1188_p3),22));

        x1_fu_1387_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(deltaEnergy_reg_2131),47));

        x_assign_fu_1327_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1312_p2),32));

        x_fu_1338_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(deltaEnergy_reg_2131),47));

end behav;
